{"version":3,"sources":["threejs/ParametricGeometries.js"],"names":["THREE","ParametricGeometries","klein","v","u","Math","PI","x","y","z","cos","sin","Vector3","plane","width","height","mobius","t","mobius3d","phi","TubeGeometry","path","segments","radius","segmentsRadius","closed","debug","this","Object3D","tangent","normal","binormal","cx","cy","pos","i","scope","numpoints","pos2","frames","FrenetFrames","tangents","normals","binormals","ParametricGeometry","call","floor","getPointAt","add","ArrowHelper","copy","clone","prototype","Object","create","Geometry","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","radiusSegments","extrudePath","Curve","tx","ty","tz","multiplyScalar","SphereGeometry","size","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"mappings":"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","file":"../../threejs/ParametricGeometries.js","sourcesContent":["/*\n * @author zz85\n *\n * Experimenting of primitive geometry creation using Surface Parametric equations\n *\n */\n\n\nTHREE.ParametricGeometries = {\n\n\tklein: function ( v, u ) {\n\n\t\tu *= Math.PI;\n\t\tv *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tvar x, y, z;\n\t\tif ( u < Math.PI ) {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t\t} else {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\t\tz = - 8 * Math.sin( u );\n\n\t\t}\n\n\t\ty = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t},\n\n\tplane: function ( width, height ) {\n\n\t\treturn function( u, v ) {\n\n\t\t\tvar x = u * width;\n\t\t\tvar y = 0;\n\t\t\tvar z = v * height;\n\n\t\t\treturn new THREE.Vector3( x, y, z );\n\n\t\t};\n\n\t},\n\n\tmobius: function( u, t ) {\n\n\t\t// flat mobius strip\n\t\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\t\tu = u - 0.5;\n\t\tvar v = 2 * Math.PI * t;\n\n\t\tvar x, y, z;\n\n\t\tvar a = 2;\n\t\tx = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\ty = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tz = u * Math.sin( v / 2 );\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t},\n\n\tmobius3d: function( u, t ) {\n\n\t\t// volumetric mobius strip\n\t\tu *= Math.PI;\n\t\tt *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tvar phi = u / 2;\n\t\tvar major = 2.25, a = 0.125, b = 0.65;\n\t\tvar x, y, z;\n\t\tx = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\t\tz = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\t\ty = ( major + x ) * Math.sin( u );\n\t\tx = ( major + x ) * Math.cos( u );\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t}\n\n};\n\n\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nTHREE.ParametricGeometries.TubeGeometry = function( path, segments, radius, segmentsRadius, closed, debug ) {\n\n\tthis.path = path;\n\tthis.segments = segments || 64;\n\tthis.radius = radius || 1;\n\tthis.segmentsRadius = segmentsRadius || 8;\n\tthis.closed = closed || false;\n\tif ( debug ) this.debug = new THREE.Object3D();\n\n\n\tvar scope = this,\n\n\t\ttangent, normal, binormal,\n\n\t\tnumpoints = this.segments + 1,\n\n\t\tx, y, z, tx, ty, tz, u, v,\n\n\t\tcx, cy, pos, pos2 = new THREE.Vector3(),\n\t\ti, j, ip, jp, a, b, c, d, uva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\n\n\tvar ParametricTube = function( u, v ) {\n\n\t\tv *= 2 * Math.PI;\n\n\t\ti = u * ( numpoints - 1 );\n\t\ti = Math.floor( i );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tif ( scope.debug ) {\n\n\t\t\tscope.debug.add( new THREE.ArrowHelper( tangent, pos, radius, 0x0000ff ) );\n\t\t\tscope.debug.add( new THREE.ArrowHelper( normal, pos, radius, 0xff0000 ) );\n\t\t\tscope.debug.add( new THREE.ArrowHelper( binormal, pos, radius, 0x00ff00 ) );\n\n\t\t}\n\n\t\tcx = - scope.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\tcy = scope.radius * Math.sin( v );\n\n\t\tpos2.copy( pos );\n\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\treturn pos2.clone();\n\n\t};\n\n\tTHREE.ParametricGeometry.call( this, ParametricTube, segments, segmentsRadius );\n\n};\n\nTHREE.ParametricGeometries.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometries.TubeGeometry.prototype.constructor = THREE.ParametricGeometries.TubeGeometry;\n\n\n /*********************************************\n  *\n  * Parametric Replacement for TorusKnotGeometry\n  *\n  *********************************************/\nTHREE.ParametricGeometries.TorusKnotGeometry = function ( radius, tube, segmentsT, segmentsR, p, q ) {\n\n\tvar scope = this;\n\n\tthis.radius = radius || 200;\n\tthis.tube = tube || 40;\n\tthis.segmentsT = segmentsT || 64;\n\tthis.segmentsR = segmentsR || 8;\n\tthis.p = p || 2;\n\tthis.q = q || 3;\n\n\tvar TorusKnotCurve = THREE.Curve.create(\n\n\t\tfunction() {\n\t\t},\n\n\t\tfunction( t ) {\n\n\t\t\tt *= Math.PI * 2;\n\n\t\t\tvar r = 0.5;\n\n\t\t\tvar tx = ( 1 + r * Math.cos( q * t ) ) * Math.cos( p * t ),\n\t\t\t\tty = ( 1 + r * Math.cos( q * t ) ) * Math.sin( p * t ),\n\t\t\t\ttz = r * Math.sin( q * t );\n\n\t\t\treturn new THREE.Vector3( tx, ty, tz ).multiplyScalar( radius );\n\n\t\t}\n\n\t);\n\tvar segments = segmentsT;\n\tvar radiusSegments = segmentsR;\n\tvar extrudePath = new TorusKnotCurve();\n\n\tTHREE.ParametricGeometries.TubeGeometry.call( this, extrudePath, segments, tube, radiusSegments, true, false );\n\n\n};\n\nTHREE.ParametricGeometries.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometries.TorusKnotGeometry.prototype.constructor = THREE.ParametricGeometries.TorusKnotGeometry;\n\n\n /*********************************************\n  *\n  * Parametric Replacement for SphereGeometry\n  *\n  *********************************************/\nTHREE.ParametricGeometries.SphereGeometry = function( size, u, v ) {\n\n\tfunction sphere( u, v ) {\n\n\t\tu *= Math.PI;\n\t\tv *= 2 * Math.PI;\n\n\t\tvar x = size * Math.sin( u ) * Math.cos( v );\n\t\tvar y = size * Math.sin( u ) * Math.sin( v );\n\t\tvar z = size * Math.cos( u );\n\n\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t}\n\n\tTHREE.ParametricGeometry.call( this, sphere, u, v, ! true );\n\n};\n\nTHREE.ParametricGeometries.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometries.SphereGeometry.prototype.constructor = THREE.ParametricGeometries.SphereGeometry;\n\n\n /*********************************************\n  *\n  * Parametric Replacement for PlaneGeometry\n  *\n  *********************************************/\n\nTHREE.ParametricGeometries.PlaneGeometry = function( width, depth, segmentsWidth, segmentsDepth ) {\n\n\tfunction plane( u, v ) {\n\n\t\tvar x = u * width;\n\t\tvar y = 0;\n\t\tvar z = v * depth;\n\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t}\n\n\tTHREE.ParametricGeometry.call( this, plane, segmentsWidth, segmentsDepth );\n\n};\n\nTHREE.ParametricGeometries.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometries.PlaneGeometry.prototype.constructor = THREE.ParametricGeometries.PlaneGeometry;\n"]}