{"version":3,"sources":["threejs/BufferGeometryUtils.js"],"names":["THREE","BufferGeometryUtils","computeTangents","geometry","handleVertex","v","n","fromArray","normals","n2","copy","t","tan1","tmp","sub","multiplyScalar","dot","normalize","tmp2","crossVectors","test","tan2","w","tangents","x","y","z","index","attributes","undefined","position","normal","uv","indices","array","positions","uvs","nVertices","length","tangent","addAttribute","BufferAttribute","Float32Array","k","Vector3","vA","vB","vC","uvA","Vector2","uvB","uvC","sdir","tdir","groups","start","count","j","jl","i","group","il","a","b","c","x1","x2","y1","y2","z1","z2","s1","s2","t1","t2","r","set","add","handleTriangle","console","warn"],"mappings":"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","file":"../../threejs/BufferGeometryUtils.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.addAttribute( 'tangent', new THREE.BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var k = 0; k < nVertices; k ++ ) {\n\n\t\t\ttan1[ k ] = new THREE.Vector3();\n\t\t\ttan2[ k ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tvar vA = new THREE.Vector3(),\n\t\t\tvB = new THREE.Vector3(),\n\t\t\tvC = new THREE.Vector3(),\n\n\t\t\tuvA = new THREE.Vector2(),\n\t\t\tuvB = new THREE.Vector2(),\n\t\t\tuvC = new THREE.Vector2(),\n\n\t\t\tsdir = new THREE.Vector3(),\n\t\t\ttdir = new THREE.Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvar x1 = vB.x - vA.x;\n\t\t\tvar x2 = vC.x - vA.x;\n\n\t\t\tvar y1 = vB.y - vA.y;\n\t\t\tvar y2 = vC.y - vA.y;\n\n\t\t\tvar z1 = vB.z - vA.z;\n\t\t\tvar z2 = vC.z - vA.z;\n\n\t\t\tvar s1 = uvB.x - uvA.x;\n\t\t\tvar s2 = uvC.x - uvA.x;\n\n\t\t\tvar t1 = uvB.y - uvA.y;\n\t\t\tvar t2 = uvC.y - uvA.y;\n\n\t\t\tvar r = 1.0 / ( s1 * t2 - s2 * t1 );\n\n\t\t\tsdir.set(\n\t\t\t\t( t2 * x1 - t1 * x2 ) * r,\n\t\t\t\t( t2 * y1 - t1 * y2 ) * r,\n\t\t\t\t( t2 * z1 - t1 * z2 ) * r\n\t\t\t);\n\n\t\t\ttdir.set(\n\t\t\t\t( s1 * x2 - s2 * x1 ) * r,\n\t\t\t\t( s1 * y2 - s2 * y1 ) * r,\n\t\t\t\t( s1 * z2 - s2 * z1 ) * r\n\t\t\t);\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\tvar group = groups[ j ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ i + 0 ],\n\t\t\t\t\tindices[ i + 1 ],\n\t\t\t\t\tindices[ i + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\tvar group = groups[ j ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\thandleVertex( indices[ i + 0 ] );\n\t\t\t\thandleVertex( indices[ i + 1 ] );\n\t\t\t\thandleVertex( indices[ i + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"]}