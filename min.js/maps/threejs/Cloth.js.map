{"version":3,"sources":["threejs/Cloth.js"],"names":["plane","width","height","u","v","x","y","THREE","Vector3","Particle","z","mass","this","position","clothFunction","previous","original","a","invMass","tmp","tmp2","satisifyConstrains","p1","p2","distance","diff","subVectors","currentDist","length","correctionHalf","multiplyScalar","add","sub","Cloth","w","h","index","particles","constrains","push","MASS","restDistance","simulate","time","lastTime","i","il","particle","constrain","wind","face","normal","faces","clothGeometry","cloth","tmpForce","copy","normalize","dot","windForce","addForce","b","c","gravity","integrate","TIMESTEP_SQ","ballPosition","Math","sin","Date","now","cos","sphere","visible","pos","ballSize","pins","p","DAMPING","DRAG","xSegs","ySegs","GRAVITY","TIMESTEP","windStrength","prototype","force","timesq","newPos","set"],"mappings":"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","file":"../../threejs/Cloth.js","sourcesContent":["/*\n * Cloth Simulation using a relaxed constrains solver\n */\n\n// Suggested Readings\n\n// Advanced Character Physics by Thomas Jakobsen Character\n// http://freespace.virgin.net/hugo.elias/models/m_cloth.htm\n// http://en.wikipedia.org/wiki/Cloth_modeling\n// http://cg.alexandra.dk/tag/spring-mass-system/\n// Real-time Cloth Animation http://www.darwin3d.com/gamedev/articles/col0599.pdf\n\nvar DAMPING = 0.03;\nvar DRAG = 1 - DAMPING;\nvar MASS = 0.1;\nvar restDistance = 25;\n\nvar xSegs = 10;\nvar ySegs = 10;\n\nvar clothFunction = plane( restDistance * xSegs, restDistance * ySegs );\n\nvar cloth = new Cloth( xSegs, ySegs );\n\nvar GRAVITY = 981 * 1.4;\nvar gravity = new THREE.Vector3( 0, - GRAVITY, 0 ).multiplyScalar( MASS );\n\n\nvar TIMESTEP = 18 / 1000;\nvar TIMESTEP_SQ = TIMESTEP * TIMESTEP;\n\nvar pins = [];\n\n\nvar wind = true;\nvar windStrength = 2;\nvar windForce = new THREE.Vector3( 0, 0, 0 );\n\nvar ballPosition = new THREE.Vector3( 0, - 45, 0 );\nvar ballSize = 60; //40\n\nvar tmpForce = new THREE.Vector3();\n\nvar lastTime;\n\n\nfunction plane( width, height ) {\n\n\treturn function( u, v ) {\n\n\t\tvar x = ( u - 0.5 ) * width;\n\t\tvar y = ( v + 0.5 ) * height;\n\t\tvar z = 0;\n\n\t\treturn new THREE.Vector3( x, y, z );\n\n\t};\n\n}\n\nfunction Particle( x, y, z, mass ) {\n\n\tthis.position = clothFunction( x, y ); // position\n\tthis.previous = clothFunction( x, y ); // previous\n\tthis.original = clothFunction( x, y );\n\tthis.a = new THREE.Vector3( 0, 0, 0 ); // acceleration\n\tthis.mass = mass;\n\tthis.invMass = 1 / mass;\n\tthis.tmp = new THREE.Vector3();\n\tthis.tmp2 = new THREE.Vector3();\n\n}\n\n// Force -> Acceleration\n\nParticle.prototype.addForce = function( force ) {\n\n\tthis.a.add(\n\t\tthis.tmp2.copy( force ).multiplyScalar( this.invMass )\n\t);\n\n};\n\n\n// Performs verlet integration\n\nParticle.prototype.integrate = function( timesq ) {\n\n\tvar newPos = this.tmp.subVectors( this.position, this.previous );\n\tnewPos.multiplyScalar( DRAG ).add( this.position );\n\tnewPos.add( this.a.multiplyScalar( timesq ) );\n\n\tthis.tmp = this.previous;\n\tthis.previous = this.position;\n\tthis.position = newPos;\n\n\tthis.a.set( 0, 0, 0 );\n\n};\n\n\nvar diff = new THREE.Vector3();\n\nfunction satisifyConstrains( p1, p2, distance ) {\n\n\tdiff.subVectors( p2.position, p1.position );\n\tvar currentDist = diff.length();\n\tif ( currentDist === 0 ) return; // prevents division by 0\n\tvar correction = diff.multiplyScalar( 1 - distance / currentDist );\n\tvar correctionHalf = correction.multiplyScalar( 0.5 );\n\tp1.position.add( correctionHalf );\n\tp2.position.sub( correctionHalf );\n\n}\n\n\nfunction Cloth( w, h ) {\n\n\tw = w || 10;\n\th = h || 10;\n\tthis.w = w;\n\tthis.h = h;\n\n\tvar particles = [];\n\tvar constrains = [];\n\n\tvar u, v;\n\n\t// Create particles\n\tfor ( v = 0; v <= h; v ++ ) {\n\n\t\tfor ( u = 0; u <= w; u ++ ) {\n\n\t\t\tparticles.push(\n\t\t\t\tnew Particle( u / w, v / h, 0, MASS )\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// Structural\n\n\tfor ( v = 0; v < h; v ++ ) {\n\n\t\tfor ( u = 0; u < w; u ++ ) {\n\n\t\t\tconstrains.push( [\n\t\t\t\tparticles[ index( u, v ) ],\n\t\t\t\tparticles[ index( u, v + 1 ) ],\n\t\t\t\trestDistance\n\t\t\t] );\n\n\t\t\tconstrains.push( [\n\t\t\t\tparticles[ index( u, v ) ],\n\t\t\t\tparticles[ index( u + 1, v ) ],\n\t\t\t\trestDistance\n\t\t\t] );\n\n\t\t}\n\n\t}\n\n\tfor ( u = w, v = 0; v < h; v ++ ) {\n\n\t\tconstrains.push( [\n\t\t\tparticles[ index( u, v ) ],\n\t\t\tparticles[ index( u, v + 1 ) ],\n\t\t\trestDistance\n\n\t\t] );\n\n\t}\n\n\tfor ( v = h, u = 0; u < w; u ++ ) {\n\n\t\tconstrains.push( [\n\t\t\tparticles[ index( u, v ) ],\n\t\t\tparticles[ index( u + 1, v ) ],\n\t\t\trestDistance\n\t\t] );\n\n\t}\n\n\n\t// While many system uses shear and bend springs,\n\t// the relax constrains model seem to be just fine\n\t// using structural springs.\n\t// Shear\n\t// var diagonalDist = Math.sqrt(restDistance * restDistance * 2);\n\n\n\t// for (v=0;v<h;v++) {\n\t// \tfor (u=0;u<w;u++) {\n\n\t// \t\tconstrains.push([\n\t// \t\t\tparticles[index(u, v)],\n\t// \t\t\tparticles[index(u+1, v+1)],\n\t// \t\t\tdiagonalDist\n\t// \t\t]);\n\n\t// \t\tconstrains.push([\n\t// \t\t\tparticles[index(u+1, v)],\n\t// \t\t\tparticles[index(u, v+1)],\n\t// \t\t\tdiagonalDist\n\t// \t\t]);\n\n\t// \t}\n\t// }\n\n\n\tthis.particles = particles;\n\tthis.constrains = constrains;\n\n\tfunction index( u, v ) {\n\n\t\treturn u + v * ( w + 1 );\n\n\t}\n\n\tthis.index = index;\n\n}\n\nfunction simulate( time ) {\n\n\tif ( ! lastTime ) {\n\n\t\tlastTime = time;\n\t\treturn;\n\n\t}\n\n\tvar i, il, particles, particle, pt, constrains, constrain;\n\n\t// Aerodynamics forces\n\n\tif ( wind ) {\n\n\t\tvar face, faces = clothGeometry.faces, normal;\n\n\t\tparticles = cloth.particles;\n\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tface = faces[ i ];\n\t\t\tnormal = face.normal;\n\n\t\t\ttmpForce.copy( normal ).normalize().multiplyScalar( normal.dot( windForce ) );\n\t\t\tparticles[ face.a ].addForce( tmpForce );\n\t\t\tparticles[ face.b ].addForce( tmpForce );\n\t\t\tparticles[ face.c ].addForce( tmpForce );\n\n\t\t}\n\n\t}\n\n\tfor ( particles = cloth.particles, i = 0, il = particles.length; i < il; i ++ ) {\n\n\t\tparticle = particles[ i ];\n\t\tparticle.addForce( gravity );\n\n\t\tparticle.integrate( TIMESTEP_SQ );\n\n\t}\n\n\t// Start Constrains\n\n\tconstrains = cloth.constrains;\n\til = constrains.length;\n\n\tfor ( i = 0; i < il; i ++ ) {\n\n\t\tconstrain = constrains[ i ];\n\t\tsatisifyConstrains( constrain[ 0 ], constrain[ 1 ], constrain[ 2 ] );\n\n\t}\n\n\t// Ball Constrains\n\n\tballPosition.z = - Math.sin( Date.now() / 600 ) * 90 ; //+ 40;\n\tballPosition.x = Math.cos( Date.now() / 400 ) * 70;\n\n\tif ( sphere.visible ) {\n\n\t\tfor ( particles = cloth.particles, i = 0, il = particles.length; i < il; i ++ ) {\n\n\t\t\tparticle = particles[ i ];\n\t\t\tpos = particle.position;\n\t\t\tdiff.subVectors( pos, ballPosition );\n\t\t\tif ( diff.length() < ballSize ) {\n\n\t\t\t\t// collided\n\t\t\t\tdiff.normalize().multiplyScalar( ballSize );\n\t\t\t\tpos.copy( ballPosition ).add( diff );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Floor Constains\n\n\tfor ( particles = cloth.particles, i = 0, il = particles.length; i < il; i ++ ) {\n\n\t\tparticle = particles[ i ];\n\t\tpos = particle.position;\n\t\tif ( pos.y < - 250 ) {\n\n\t\t\tpos.y = - 250;\n\n\t\t}\n\n\t}\n\n\t// Pin Constrains\n\n\tfor ( i = 0, il = pins.length; i < il; i ++ ) {\n\n\t\tvar xy = pins[ i ];\n\t\tvar p = particles[ xy ];\n\t\tp.position.copy( p.original );\n\t\tp.previous.copy( p.original );\n\n\t}\n\n\n}\n"]}