{"version":3,"sources":["az_sprites.js"],"names":["Drupal","atomizer","spritesC","_viewer","controlSet","computeCentroids","faces","vertices","f","fl","face","length","centroid","THREE","Vector3","set","add","a","b","c","divideScalar","roundRect","ctx","x","y","w","h","r","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","makeTextSprite","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","backgroundColor","color","canvas","document","createElement","context","getContext","font","textWidth","measureText","width","fillStyle","strokeStyle","lineWidth","fillText","imgData","getImageData","height","putImageData","texture","Texture","needsUpdate","spriteMaterial","SpriteMaterial","map","opacity","transparent","visible","sprite","Sprite","scale","viewer","createVerticeIds","name","geometry","verticeIds","Group","theme","get","id","i","spritey","position","z","createFaceIds","faceIds"],"mappings":"AAIAA,OAAOC,SAASC,SAAW,SAAUC,EAASC,GAI7C,SAASC,EAAiBC,EAAOC,GAChC,IAAIC,EAAGC,EAAIC,EACX,IAAMF,EAAI,EAAGC,EAAKH,EAAMK,OAAQH,EAAIC,EAAID,KACvCE,EAAOJ,EAAOE,IACTI,SAAW,IAAIC,MAAMC,QAC1BJ,EAAKE,SAASG,IAAK,EAAG,EAAG,GAEzBL,EAAKE,SAASI,IAAKT,EAAUG,EAAKO,IAClCP,EAAKE,SAASI,IAAKT,EAAUG,EAAKQ,IAClCR,EAAKE,SAASI,IAAKT,EAAUG,EAAKS,IAClCT,EAAKE,SAASQ,aAAc,GAK9B,SAASC,EAAUC,EAAKC,EAAGC,EAAGC,EAAGC,EAAGC,GAEnCL,EAAIM,YACJN,EAAIO,OAAON,EAAEI,EAAGH,GAChBF,EAAIQ,OAAOP,EAAEE,EAAEE,EAAGH,GAClBF,EAAIS,iBAAiBR,EAAEE,EAAGD,EAAGD,EAAEE,EAAGD,EAAEG,GACpCL,EAAIQ,OAAOP,EAAEE,EAAGD,EAAEE,EAAEC,GACpBL,EAAIS,iBAAiBR,EAAEE,EAAGD,EAAEE,EAAGH,EAAEE,EAAEE,EAAGH,EAAEE,GACxCJ,EAAIQ,OAAOP,EAAEI,EAAGH,EAAEE,GAClBJ,EAAIS,iBAAiBR,EAAGC,EAAEE,EAAGH,EAAGC,EAAEE,EAAEC,GACpCL,EAAIQ,OAAOP,EAAGC,EAAEG,GAChBL,EAAIS,iBAAiBR,EAAGC,EAAGD,EAAEI,EAAGH,GAChCF,EAAIU,YACJV,EAAIW,OACJX,EAAIY,SAGL,SAASC,EAAgBC,EAASC,QAEbC,IAAfD,IAA2BA,MAChC,IAAIE,EAAWF,EAAWG,eAAe,YAAeH,EAAqB,SAAI,QAC7EI,EAAWJ,EAAWG,eAAe,YAAeH,EAAqB,SAAI,GAC7EK,EAAkBL,EAAWG,eAAe,mBAAsBH,EAA4B,gBAAI,EAClGM,EAAcN,EAAWG,eAAe,eAAkBH,EAAwB,YAAI,UACtFO,EAAkBP,EAAWG,eAAe,mBAAsBH,EAA4B,gBAAI,UAClGQ,EAAQR,EAAWG,eAAe,SAAYH,EAAkB,MAAI,UAEpES,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAChCD,EAAQE,KAAO,QAAUV,EAAW,MAAQF,EAG5C,IACIa,EADUH,EAAQI,YAAajB,GACXkB,MAIxBL,EAAQM,UAAcX,EAEtBK,EAAQO,YAAcb,EACtBM,EAAQQ,UAAYf,EACpBrB,EAAU4B,EAAS,EAAG,EAAGG,EAAsB,KAAXX,EAAkBC,EAAiB,GAEvEO,EAAQM,UAAYV,EACpBI,EAAQS,SAAUtB,EAASM,EAAiBD,GAE5C,IAAIkB,EAAUV,EAAQW,aAAa,EAAG,EAAGR,EAZxB,IAajBN,EAAOQ,MAAQF,EACfN,EAAOe,OAdU,GAejBZ,EAAQa,aAAaH,EAAS,EAAG,GAGjC,IAAII,EAAU,IAAIlD,MAAMmD,QAAQlB,GAChCiB,EAAQE,aAAc,EAEtB,IAAIC,EAAiB,IAAIrD,MAAMsD,gBAAgBC,IAAKL,IACpDG,EAAeG,QAAUhC,EAAWgC,SAAW,EAC/CH,EAAeI,YAAcjC,EAAWiC,cAAe,EACvDJ,EAAeK,QAAUlC,EAAWkC,UAAW,EAC/C,IAAIC,EAAS,IAAI3D,MAAM4D,OAAOP,GAE9B,OADAM,EAAOE,MAAM3D,IAAI,GAAI,GAAI,GAClByD,EA/ER,IAAIG,EAASxE,EAqJZ,OACEyE,iBApEoB,SAA2BC,EAAMC,GACvD,IAAIC,EAAa,IAAIlE,MAAMmE,MAC3BD,EAAWF,KAAOA,EAAO,YAEzB,IAAIR,EAAUM,EAAOM,MAAMC,IAAIL,EAAO,qBAElCM,EAAc,UAARN,EAAoB,kBAAoB,mBAClDM,EAAKN,EAAOM,EAUZ,IAAK,IATD9C,GACHI,SAAU,GACVI,MAAO,UACPD,gBAAiB+B,EAAOM,MAAMC,IAAIC,GAClCd,QAASA,EACTC,YAAcD,EAAS,IACrBE,QAAUF,EAAS,KAGbe,EAAI,EAAGA,EAAIN,EAASvE,SAASI,OAAQyE,IAC9C,CACC,IAAIC,EAAUlD,EAAgB,IAAMiD,EAAI,IAAK/C,GAC7CgD,EAAQR,KAAOA,EAAO,WAElBH,EAAQ,EACZW,EAAQC,SAAS/D,EAAImD,EAAQI,EAASvE,SAAS6E,GAAG7D,EAClD8D,EAAQC,SAAS9D,EAAIkD,EAAQI,EAASvE,SAAS6E,GAAG5D,EAClD6D,EAAQC,SAASC,EAAIb,EAAQI,EAASvE,SAAS6E,GAAGG,EAClDR,EAAW/D,IAAKqE,GAEjB,IAAIX,EAAQ,EAGZ,OAFAK,EAAWL,MAAM3D,IAAI2D,EAAOA,EAAOA,GAE5BK,GAsCNS,cAnCkB,SAAwBX,EAAMC,GACjD,IAAIW,EAAU,IAAI5E,MAAMmE,MACxB3E,EAAiByE,EAASxE,MAAOwE,EAASvE,UAC1CkF,EAAQZ,KAAOA,EAAO,UAatB,IAAK,IAXDR,EAAUM,EAAOM,MAAMC,IAAIL,EAAO,mBAElCxC,GACHI,SAAU,GACVI,MAAO8B,EAAOM,MAAMC,IAAIL,EAAO,oBAC/BjC,gBAAiB,UACjByB,QAASA,EACTC,YAAcD,EAAS,IACvBE,QAAUF,EAAS,KAGXe,EAAI,EAAGA,EAAIN,EAASxE,MAAMK,OAAQyE,IAC3C,CACC,IAAIC,EAAUlD,EAAgB,IAAMiD,EAAI,IAAK/C,GAC7CgD,EAAQR,KAAOA,EAAO,SAElBH,EAAQ,EACZW,EAAQC,SAAS/D,EAAImD,EAAQI,EAASxE,MAAM8E,GAAGxE,SAASW,EACxD8D,EAAQC,SAAS9D,EAAIkD,EAAQI,EAASxE,MAAM8E,GAAGxE,SAASY,EACxD6D,EAAQC,SAASC,EAAIb,EAAQI,EAASxE,MAAM8E,GAAGxE,SAAS2E,EACxDE,EAAQzE,IAAKqE,GAEd,IAAIX,EAAQ,EAGZ,OAFAe,EAAQf,MAAM3D,IAAI2D,EAAOA,EAAOA,GAEzBe","file":"../az_sprites.js","sourcesContent":["/**\n * @file az_sprites.js\n */\n\nDrupal.atomizer.spritesC = function (_viewer, controlSet) {\n\tvar viewer = _viewer;\n\tvar axes = ['x', 'y', 'z'];\n\n\tfunction computeCentroids(faces, vertices) {\n\t\tvar f, fl, face;\n\t\tfor ( f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\t\tface = faces[ f ];\n\t\t\tface.centroid = new THREE.Vector3();\n\t\t\tface.centroid.set( 0, 0, 0 );\n\n\t\t\tface.centroid.add( vertices[ face.a ] );\n\t\t\tface.centroid.add( vertices[ face.b ] );\n\t\t\tface.centroid.add( vertices[ face.c ] );\n\t\t\tface.centroid.divideScalar( 3 );\n\t\t}\n\t}\n\n// function for drawing rounded rectangles\n\tfunction roundRect(ctx, x, y, w, h, r)\n\t{\n\t\tctx.beginPath();\n\t\tctx.moveTo(x+r, y);\n\t\tctx.lineTo(x+w-r, y);\n\t\tctx.quadraticCurveTo(x+w, y, x+w, y+r);\n\t\tctx.lineTo(x+w, y+h-r);\n\t\tctx.quadraticCurveTo(x+w, y+h, x+w-r, y+h);\n\t\tctx.lineTo(x+r, y+h);\n\t\tctx.quadraticCurveTo(x, y+h, x, y+h-r);\n\t\tctx.lineTo(x, y+r);\n\t\tctx.quadraticCurveTo(x, y, x+r, y);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\n\tfunction makeTextSprite( message, parameters ) {\n\n\t\tif ( parameters === undefined ) parameters = {};\n\t\tvar fontface = parameters.hasOwnProperty(\"fontface\") ?  parameters[\"fontface\"] : \"Arial\";\n\t\tvar fontsize = parameters.hasOwnProperty(\"fontsize\") ?  parameters[\"fontsize\"] : 16;\n\t\tvar borderThickness = parameters.hasOwnProperty(\"borderThickness\") ?  parameters[\"borderThickness\"] : 0;\n\t\tvar borderColor = parameters.hasOwnProperty(\"borderColor\") ?  parameters[\"borderColor\"] : '#990099';\n\t\tvar backgroundColor = parameters.hasOwnProperty(\"backgroundColor\") ?  parameters[\"backgroundColor\"] : '#009999';\n\t\tvar color = parameters.hasOwnProperty(\"color\") ?  parameters[\"color\"] : '#ffffff';\n\n\t\tvar canvas = document.createElement('canvas');\n\t\tvar context = canvas.getContext('2d');\n\t\tcontext.font = \"Bold \" + fontsize + \"px \" + fontface;\n\n\t\t// get size data (height depends only on font size)\n\t\tvar metrics = context.measureText( message );\n\t\tvar textWidth = metrics.width;\n\t\tvar textHeight = 88;\n\n\t\t// background\n\t\tcontext.fillStyle   = backgroundColor;\n\t\t// border\n\t\tcontext.strokeStyle = borderColor;\n\t\tcontext.lineWidth = borderThickness;\n\t\troundRect(context, 0, 0, textWidth, fontsize * 1.35 + borderThickness, 8);\n\t\t// text color\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillText( message, borderThickness, fontsize);\n\n\t\tvar imgData = context.getImageData(0, 0, textWidth, textHeight);\n\t\tcanvas.width = textWidth;\n\t\tcanvas.height = textHeight;\n\t\tcontext.putImageData(imgData, 0, 0);\n\n\t\t// canvas contents will be used for a texture\n\t\tvar texture = new THREE.Texture(canvas)\n\t\ttexture.needsUpdate = true;\n\n\t\tvar spriteMaterial = new THREE.SpriteMaterial({map: texture});\n\t\tspriteMaterial.opacity = parameters.opacity || 0;\n\t\tspriteMaterial.transparent = parameters.transparent || false;\n\t\tspriteMaterial.visible = parameters.visible || true;\n\t\tvar sprite = new THREE.Sprite(spriteMaterial);\n\t\tsprite.scale.set(20, 20, 1);\n\t\treturn sprite;\n\t}\n\n\tvar createVerticeIds = function createVerticeIds (name, geometry) {\n\t\tvar verticeIds = new THREE.Group();\n\t\tverticeIds.name = name + 'Vertexids';\n\n\t\tvar opacity = viewer.theme.get(name + 'Vertexid--opacity')\n\n\t\tvar id = (name == 'proton') ? 'Vertexid--color' : 'Wireframe--color';\n\t\tid = name + id;\n\t\tvar parameters = {\n\t\t\tfontsize: 60,\n\t\t\tcolor: '#000000',\n\t\t\tbackgroundColor: viewer.theme.get(id),\n\t\t\topacity: opacity,\n\t\t\ttransparent: (opacity <.97) ? true : false,\n\t    visible: (opacity >.03) ? true : false\n\t\t};\n\n\t\tfor (var i = 0; i < geometry.vertices.length; i++)\n\t\t{\n\t\t\tvar spritey = makeTextSprite( \" \" + i + \" \", parameters);\n\t\t\tspritey.name = name + 'Vertexid';\n\n\t\t\tvar scale = 2.0;\n\t\t\tspritey.position.x = scale * geometry.vertices[i].x;\n\t\t\tspritey.position.y = scale * geometry.vertices[i].y;\n\t\t\tspritey.position.z = scale * geometry.vertices[i].z;\n\t\t\tverticeIds.add( spritey );\n\t\t}\n\t\tvar scale = 1;\n\t\tverticeIds.scale.set(scale, scale, scale);\n\n\t\treturn verticeIds;\n\t}\n\n\tvar createFaceIds = function createFaceIds (name, geometry) {\n\t\tvar faceIds = new THREE.Group();\n\t\tcomputeCentroids(geometry.faces, geometry.vertices);\n\t\tfaceIds.name = name + 'Faceids';\n\n\t\tvar opacity = viewer.theme.get(name + 'Faceid--opacity')\n\n\t\tvar parameters = {\n\t\t\tfontsize: 60,\n\t\t\tcolor: viewer.theme.get(name + 'Wireframe--color'),\n\t\t\tbackgroundColor: '#000000',\n\t\t\topacity: opacity,\n\t\t\ttransparent: (opacity <.97) ? true : false,\n\t\t\tvisible: (opacity >.03) ? true : false\n\t\t};\n\n\t\tfor (var i = 0; i < geometry.faces.length; i++)\n\t\t{\n\t\t\tvar spritey = makeTextSprite( \" \" + i + \" \", parameters);\n\t\t\tspritey.name = name + 'Faceid';\n\n\t\t\tvar scale = 2.0;\n\t\t\tspritey.position.x = scale * geometry.faces[i].centroid.x;\n\t\t\tspritey.position.y = scale * geometry.faces[i].centroid.y;\n\t\t\tspritey.position.z = scale * geometry.faces[i].centroid.z;\n\t\t\tfaceIds.add( spritey );\n\t\t}\n\t\tvar scale = 1;\n\t\tfaceIds.scale.set(scale, scale, scale);\n\n\t\treturn faceIds;\n\t}\n\n  return {\n    createVerticeIds: createVerticeIds,\n\t  createFaceIds:    createFaceIds\n  }\n};\n\n\n"]}