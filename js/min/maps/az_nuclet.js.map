{"version":3,"sources":["az_nuclet.js"],"names":["jQuery","Drupal","atomizer","nucletC","_viewer","createAxes","name","conf","geometry","axisGeometry","THREE","Geometry","opacity","viewer","theme","get","lineMaterial","LineBasicMaterial","color","transparent","constants","transparentThresh","visible","visibleThresh","linewidth","i","vertices","length","vertice","push","Vector3","x","y","z","axes","LineSegments","scale","set","createLine","lineGeometry","lines","createGeometryWireframe","id","rotation","wireframe","Mesh","MeshBasicMaterial","wireframeLinewidth","axis","radians","Math","PI","addObject","createGeometryLines","material","Group","f","azfaces","vertex","face","v","indices","add","Line","createGeometryFaces","reactiveState","faces","dynamic","opaqueMaterial","MeshLambertMaterial","vertexColors","FaceColors","transparentMaterial","MultiMaterial","materialIndex","MeshStandardMaterial","roughness","metalness","makeObject","mat","compConf","pos","PlaneGeometry","width","depth","SphereGeometry","radius","widthSegments","heightSegments","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","DodecahedronGeometry","l","BoxGeometry","createBiPyramid","height","materials","lambert","phong","MeshPhongMaterial","doubleSided","side","DoubleSide","object","SceneUtils","createMultiMaterialObject","position","createGeometry","shape","state","detail","shapes","getGeometry","protonRadius","makeProtonName","azNuclet","protonType","colorType","undefined","caps","c","protons","indexOf","makeProton","az","type","optional","active","proton","protonColors","replace","deleteProtons","createHelperAxes","AxisHelper","createProtons","p","vids","protonGeometry","hasOwnProperty","parseInt","createValenceRings","diameter","rings","valence","ringConf","torusGeometry","TorusGeometry","ring","createTetrahedrons","tetrahedrons","tetrahedron","createTetrahedron","azid","children","createElectrons","groupName","nucletConf","electrons","e","contains","electron","electronRadius","createWireframe","createNucletGroupGeometry","geoGroup","nucletGroup","scaleHeight","scaleInit","applyMatrix","Matrix4","makeRotationX","makeRotationY","makeRotationZ","t","assignFaceOpacity","slice","vertexids","sprites","createVerticeIds","faceids","createFaceIds","particleids","createNucletGroup","tscale","parseFloat","alignyaxis","vertice1","vertice2","newAxis","clone","sub","base","alignObjectToAxis","normalize","attachPt","multiplyScalar","rotatey","compName","components","deleteNuclet","nuclet","atom","nuclets","parent","remove","n","rad","len","geom","mesth","inc","a","cos","sin","Face3","computeFaceNormals","objects","default","ghost","grow","polar","neutral","lithium","beryllium","boron","carbon","initial","capped","final","showProtons","show","createNuclet","geo","drupalSettings","atomizer_config","geoGroups","line","innerShell","Object3D","outerShell"],"mappings":"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","file":"../az_nuclet.js","sourcesContent":["/**\n * @file - az_nuclet.js\n *\n * Functions to create a nuclet.\n */\n\n/**\n * Class to build and maintain individual nuclets\n * d$does not really do anything except define function to call.\n *\n * @param _viewer\n * @returns {\n *   {makeObject: makeObject,\n *    makeProton: makeProton,\n *    showProtons: showProtons,\n *    createNuclet: createNuclet,\n *    deleteNuclet: deleteNuclet,\n *    createGeometry: createGeometry,\n *    createGeometryWireframe: createGeometryWireframe,\n *    createGeometryFaces: createGeometryFaces,\n *    protonRadius}\n * }\n */\n(function ($) {\n  Drupal.atomizer.nucletC = function (_viewer) {\n    var viewer = _viewer;\n    var constants = Drupal.atomizer.base.constants;\n    var axes = ['x', 'y', 'z'];\n    var protonColors = {\n      default: viewer.theme.get('proton-default--color'),\n      ghost: viewer.theme.get('proton-ghost--color'),\n      valence: viewer.theme.get('proton-valence--color'),\n      grow: viewer.theme.get('proton-grow--color'),\n      polar: viewer.theme.get('proton-polar--color'),\n      neutral: viewer.theme.get('proton-neutral--color'),\n      lithium: viewer.theme.get('proton-lithium--color'),\n      beryllium: viewer.theme.get('proton-beryllium--color'),\n      boron: viewer.theme.get('proton-boron--color'),\n      carbon: viewer.theme.get('proton-carbon--color'),\n      initial: viewer.theme.get('proton-initial--color'),\n      capped: viewer.theme.get('proton-capped--color'),\n      final: viewer.theme.get('proton-final--color'),\n    };\n\n    var protonRadius = viewer.theme.get('proton--radius');\n    var electronRadius = viewer.theme.get('electron--radius');\n\n    /*\n     computeFaceNormals: function () {\n     var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n     for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n     var face = this.faces[ f ];\n\n     var vA = this.vertices[ face.a ];\n     var vB = this.vertices[ face.b ];\n     var vC = this.vertices[ face.c ];\n\n     cb.subVectors( vC, vB );\n     ab.subVectors( vA, vB );\n     cb.cross( ab );\n     cb.normalize();\n     face.normal.copy( cb );\n     }\n     } */\n\n    /**\n     * Create the axis lines for a nuclet.\n     *\n     * @param name\n     * @param conf\n     * @param geometry\n     * @returns {THREE.LineSegments}\n     */\n    function createAxes(name, conf, geometry) {\n      var axisGeometry = new THREE.Geometry();\n      var opacity = viewer.theme.get(name + 'Axes--opacity');\n      var lineMaterial = new THREE.LineBasicMaterial({\n        color: viewer.theme.get(name + 'Axes--color'),\n        opacity: opacity,\n        transparent: (opacity < constants.transparentThresh),\n        visible: (opacity > constants.visibleThresh),\n        linewidth: 2\n      });\n      for (var i = 0; i < conf.vertices.length; i++) {\n        var vertice;\n        vertice = geometry.vertices[conf.vertices[i][0]];\n        axisGeometry.vertices.push(new THREE.Vector3(vertice.x, vertice.y, vertice.z));\n        vertice = geometry.vertices[conf.vertices[i][1]];\n        axisGeometry.vertices.push(new THREE.Vector3(vertice.x, vertice.y, vertice.z));\n      }\n      var axes = new THREE.LineSegments(axisGeometry, lineMaterial);\n      if (conf.scale) {\n        axes.scale.set(conf.scale, conf.scale, conf.scale);\n      }\n      axes.name = name + 'Axes';\n      return axes;\n    }\n\n    /**\n     * Create a line anywhere in 3d space\n     *\n     * @param name\n     * @param conf\n     * @param geometry\n     * @returns {THREE.LineSegments}\n     */\n    function createLine(name, vertices, opacity) {\n      var lineGeometry = new THREE.Geometry();\n      var lineMaterial = new THREE.LineBasicMaterial({\n        color: 0xff00ff,\n        opacity: opacity,\n        transparent: (opacity < constants.transparentThresh),\n        visible: (opacity > constants.visibleThresh),\n        linewidth: 2\n      });\n      for (var i = 0; i < vertices.length; i++) {\n        var vertice = vertices[i];\n        lineGeometry.vertices.push(new THREE.Vector3(vertice.x, vertice.y, vertice.z));\n      }\n      var lines = new THREE.LineSegments(lineGeometry, lineMaterial);\n      lines.name = name + 'Lines';\n      return lines;\n    }\n\n    /**\n     * Create a wireframe for a geometry using the standard three.js wireframes.\n     *\n     * This creates the three.js default wireframes.  These draw triangles.  To create\n     * a wireframe for the cube (square) and pentagon (dodecahedron) use the createGeometryLines function.\n     *\n     * @param id\n     * @param scale\n     * @param geometry\n     * @param rotation\n     * @returns {THREE.Mesh}\n     */\n    function createGeometryWireframe(id, scale, geometry, rotation) {\n\n      var opacity = viewer.theme.get(id + '--opacity');\n      var wireframe = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n        color: viewer.theme.get(id + '--color'),\n        opacity: opacity,\n        transparent: (opacity < constants.transparentThresh),\n        visible: (opacity > constants.visibleThresh),\n        wireframe: true,\n        wireframeLinewidth: viewer.theme.get(id + '--linewidth')\n      }));\n      wireframe.scale.set(scale, scale, scale);\n      wireframe.name = id;\n      if (rotation) {\n        for (var i in axes) {\n          var axis = axes[i];\n          if (rotation[axis]) {\n            var radians = rotation[axis] / 360 * 2 * Math.PI;\n            wireframe.rotation['init_' + axis] = radians;\n            wireframe.rotation[axis] = radians;\n          }\n        }\n      }\n//  if (offsetY) {\n//    wireframe.position.y = offsetY * viewer.theme.get('proton--radius');\n//    wireframe.init_offsetY = offsetY * viewer.theme.get('proton--radius');\n//  }\n      addObject(id, wireframe);\n      return wireframe;\n    };\n\n    /**\n     * Create a wireframe of lines.\n     *\n     * The three.js library creates wireframes that draw triangles.\n     * This function draw individual lines and is useful for non-triangular faces like those found in the\n     * cube and dodecahedron.\n     *\n     * @param id\n     * @param scale\n     * @param geometry\n     * @param rotation\n     * @returns {THREE.Group}\n     */\n    function createGeometryLines(id, scale, geometry, rotation) {\n\n      var opacity = viewer.theme.get(id + '--opacity');\n      var material = new THREE.LineBasicMaterial({\n        color: viewer.theme.get(id + '--color'),\n        opacity: opacity,\n        transparent: (opacity < constants.transparentThresh),\n        visible: (opacity > constants.visibleThresh),\n        linewidth: viewer.theme.get(id + '--linewidth')\n      });\n\n      var lines = new THREE.Group();\n      lines.name = id;\n      for (var f = 0; f < geometry.azfaces.length; f++) {\n        var face = geometry.azfaces[f];\n        var lineGeometry = new THREE.Geometry();\n        var vertex;\n        for (var v = 0; v < face.indices.length; v++) {\n          vertex = geometry.vertices[face.indices[v]];\n          lineGeometry.vertices.push(new THREE.Vector3(vertex.x, vertex.y, vertex.z));\n        }\n        vertex = geometry.vertices[face.indices[0]];\n        lineGeometry.vertices.push(new THREE.Vector3(vertex.x, vertex.y, vertex.z));\n\n        lines.add(new THREE.Line(lineGeometry, material));\n      }\n      lines.scale.set(scale, scale, scale);\n\n      if (rotation) {\n        for (var i in axes) {\n          var axis = axes[i];\n          if (rotation[axis]) {\n            var radians = rotation[axis] / 360 * 2 * Math.PI;\n            lines.rotation['init_' + axis] = radians;\n            lines.rotation[axis] = radians;\n          }\n        }\n      }\n//  if (offsetY) {\n//    lines.position.y = offsetY * viewer.theme.get('proton--radius');\n//    lines.init_offsetY = offsetY * viewer.theme.get('proton--radius');\n//  }\n      addObject(id, lines);\n      return lines;\n    }\n\n    /**\n     * Create the faces for a geometry.\n     *\n     * @param id\n     * @param scale\n     * @param geometry\n     * @param rotation\n     * @returns {THREE.Mesh|*}\n     */\n    function createGeometryFaces(id, scale, geometry, rotation, reactiveState) {\n      var faces;\n      if (reactiveState) {\n        geometry.dynamic = true;\n        // add one random mesh to each scene\n        var opaqueMaterial = new THREE.MeshLambertMaterial({\n          color: viewer.theme.get(id + '--color'),\n          opacity: viewer.theme.get(id + '--opacity'),\n          transparent: true,\n          vertexColors: THREE.FaceColors\n        });\n        var transparentMaterial = new THREE.MeshLambertMaterial({\n          color: viewer.theme.get(id + '--color'),\n          opacity: 0,\n          transparent: true,\n          vertexColors: THREE.FaceColors\n        });\n\n        faces = new THREE.Mesh(\n          geometry,\n          new THREE.MultiMaterial([transparentMaterial, opaqueMaterial])\n        );\n        for (var i = 0; i < reactiveState.length; i++) {\n          geometry.faces[reactiveState[i]].materialIndex = 1;\n        }\n      } else {\n        var opacity = viewer.theme.get(id + '--opacity');\n        var material = new THREE.MeshStandardMaterial({\n          color: viewer.theme.get(id + '--color'),\n          opacity: opacity,\n          transparent: (opacity < constants.transparentThresh),\n          visible: (opacity > constants.visibleThresh),\n          roughness: 0.5,\n          metalness: 0,\n          vertexColors: THREE.FaceColors\n        });\n        faces = new THREE.Mesh(geometry, material);\n      }\n\n      faces.scale.set(scale, scale, scale);\n      faces.name = id;\n      if (rotation) {\n        for (var i in axes) {\n          var axis = axes[i];\n          if (rotation[axis]) {\n            var radians = rotation[axis] / 360 * 2 * Math.PI;\n            faces.rotation['init_' + axis] = radians;\n            faces.rotation[axis] = radians;\n          }\n        }\n      }\n      /*\n       if (offsetY) {\n       if (offsetY.x) faces.position.x = offsetY.x;\n       if (offsetY.y) faces.position.y = offsetY.y;\n       if (offsetY.z) faces.position.z = offsetY.z;\n       faces.init_offset = offsetY;\n       } */\n      addObject(id, faces);\n      return faces;\n    }\n\n    /**\n     * Make an object - sphere, tetrahedron, line, etc.\n     *\n     * @param name\n     * @param mat\n     * @param geo\n     * @param pos\n     * @returns {*}\n     */\n    function makeObject(name, mat, compConf, pos) {\n      // Set the geometry\n      var geometry;\n      var receiveShadow = false;\n      switch (name) {\n        case 'plane':\n          receiveShadow = true;\n          geometry = new THREE.PlaneGeometry(\n            compConf.width || 1000,\n            compConf.depth || 1000\n          );\n          break;\n        case 'proton':\n        case 'sphere':\n          geometry = new THREE.SphereGeometry(\n            compConf.radius || viewer.theme.get('proton--radius'),\n            compConf.widthSegments || 36,\n            compConf.heightSegments || 36\n          );\n          break;\n        case 'electron':\n          geometry = new THREE.SphereGeometry(\n            compConf.radius || viewer.theme.get('electron--radius'),\n            compConf.widthSegments || 24,\n            compConf.heightSegments || 24\n          );\n          break;\n        case 'octahedron':\n          geometry = new THREE.OctahedronGeometry(compConf.length || 3);\n          break;\n        case 'tetrahedron':\n          geometry = new THREE.TetrahedronGeometry(compConf.length || 3);\n          break;\n        case 'icosahedron':\n          geometry = new THREE.IcosahedronGeometry(compConf.length || 3);\n          break;\n        case 'dodecahedron':\n          geometry = new THREE.DodecahedronGeometry(compConf.length || 3);\n          break;\n        case 'cube':\n          var l = compConf.length || 4;\n          geometry = new THREE.BoxGeometry(l, l, l);\n          break;\n        case 'pentagonalBipyramid':\n          geometry = createBiPyramid(5, compConf.length, compConf.height, 35);\n          break;\n      }\n\n      // Set the Mesh material\n      var materials = [];\n      if (mat.wireframe) {\n        materials.push(new THREE.MeshBasicMaterial(mat.wireframe));\n      }\n      if (mat.lambert) {\n        materials.push(new THREE.MeshLambertMaterial(mat.lambert));\n      }\n      if (mat.phong) {\n        materials.push(new THREE.MeshPhongMaterial(mat.phong));\n      }\n      if (mat.doubleSided) {\n        materials[0].side = THREE.DoubleSide;\n      }\n\n      // Create the object\n      var object;\n      if (materials.length == 1) {\n        if (name == 'proton') {\n//      object = new Physijs.SphereMesh(geometry, materials[0]);\n          object = new THREE.Mesh(geometry, materials[0]);\n        } else {\n          object = new THREE.Mesh(geometry, materials[0]);\n        }\n      } else {\n        object = new THREE.SceneUtils.createMultiMaterialObject(geometry, materials);\n      }\n\n      // Set scale\n      if (compConf.scale) {\n        object.scale.set(compConf.scale, compConf.scale, compConf.scale);\n      }\n\n      // Set rotation\n      if (pos.rotation) {\n        if (pos.rotation.x) {\n          object.rotation.x = pos.rotation.x;\n        }\n        if (pos.rotation.y) {\n          object.rotation.y = pos.rotation.y;\n        }\n        if (pos.rotation.z) {\n          object.rotation.z = pos.rotation.z;\n        }\n      }\n\n      // Position the object\n      object.position.x = pos.x || 0;\n      object.position.y = pos.y || 0;\n      object.position.z = pos.z || 0;\n\n      object.name = name;\n\n      return object;\n    }\n\n    /**\n     * Create a geometry for the primary shapes - icosahedron, dodecahedron, tetrahedron, line, etc.\n     *\n     * @param shape\n     * @param scale\n     * @param height\n     * @param detail\n     * @returns {*}\n     */\n    function createGeometry(shape, state, scale, height, detail) {\n      switch (shape) {\n        case 'neutral':\n        case 'lithium':\n        case 'boron':\n        case 'beryllium':\n        case 'icosahedron':\n          return viewer.shapes.getGeometry('icosahedron', 'final', scale, null, detail);\n        case 'decahedron':\n          return viewer.shapes.getGeometry('decahedron', 'final', scale, height, detail);\n          break;\n        case 'line':\n          var lineGeometry = new THREE.Geometry();\n          var pos = protonRadius * 2;\n          lineGeometry.vertices.push(new THREE.Vector3(pos, 0, 0));\n          lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\n          lineGeometry.vertices.push(new THREE.Vector3(-pos, 0, 0));\n          return lineGeometry;\n        case 'tetrahedron':\n          return new THREE.TetrahedronGeometry(scale, detail);\n        case 'dodecahedron':\n        case 'hexahedron':\n        case 'backbone':\n          return viewer.shapes.getGeometry(shape, state, scale, null, detail);\n        case 'octahedron':\n          return new THREE.OctahedronGeometry(scale, detail);\n      }\n    }\n\n    function makeProtonName(azNuclet, protonType) {\n      var colorType;\n      colorType = viewer.theme.get('proton--color-style');\n      if (!colorType) {\n        colorType = 'nuclet';\n      }\n\n      if (colorType === 'nuclet' && azNuclet && azNuclet.state && azNuclet.state !== undefined) {\n        if (azNuclet.state === 'hydrogen' || azNuclet.state === 'helium') {\n          return 'proton-default';\n        }\n\n        if (protonType === 'neutral') {\n          return 'proton-neutral';\n        }\n        if (azNuclet.state === 'initial') {\n          var caps = [12, 13, 14, 15, 16, 17, 18, 19];\n          for (var c = 0; c < caps.length; c++) {\n            if (azNuclet.conf.protons.indexOf(caps[c]) === -1) {\n              return 'proton-initial';\n            }\n          }\n          return 'proton-capped';\n        }\n        return 'proton-' + azNuclet.state;\n      }\n      else if (colorType === 'proton' && protonType && protonType !== undefined) {\n        return 'proton-' + protonType;\n      }\n      else {\n        return 'proton-default';\n      }\n    }\n\n    /**\n     * Make one proton.\n     *\n     * @param protonConf\n     * @param opacity\n     * @param pos\n     *\n     * @returns {*}\n     */\n    function makeProton(conf, opacity, pos, azNuclet) {\n\n      var az = {\n        type: conf.type || 'default',\n        visible: ('visible' in conf) ? conf.visible : true,\n        optional: conf.optional || false,\n        active: conf.active || true\n      };\n\n      var opacity = viewer.theme.get('proton--opacity');\n\n      var visible;\n      if (az.active === false) {\n        visible = false;\n      } else {\n        visible = (az.visible === false) ? false : (opacity > constants.visibleThresh);\n      }\n\n      var name = makeProtonName(azNuclet, az.type);\n      var proton = makeObject('proton',\n        {\n          phong: {\n            color: protonColors[name.replace('proton-', '')],\n            opacity: opacity,\n            transparent: (opacity < constants.transparentThresh),\n            visible: visible,\n          }\n        },\n        {\n          scale: viewer.theme.get('proton--scale'),\n          radius: protonRadius\n        },\n        {\n          x: pos.x,\n          y: pos.y,\n          z: pos.z\n        }\n      );\n      proton.name = name;\n      proton.material.visible = visible;\n      proton.az = az;\n      return proton;\n    }\n\n    /**\n     * Delete a proton\n     *\n     * @param proton\n     */\n    function deleteProtons(protons) {\n      /*\n       // Remove the proton from the viewer.objects.protons array\n       for (var p = 0; p < protons.length; p++) {\n       var proton = protons[p];\n       // Remove protons from the objects.protons array\n       viewer.objects.protons = viewer.objects.protons.filter(function (e) {return e !== proton;})\n       }\n       */\n    }\n\n    /**\n     * Show or hide a list of protons\n     *\n     * @param proton\n     */\n    function showProtons(nuclet, show, protons) {\n      // Remove the proton from the viewer.objects.protons array\n      for (var p = 0; p < protons.length; p++) {\n        var proton = nuclet.az.protons[protons[p]];\n        if (show) {\n//      if (viewer.objects.protons.indexOf(proton) === -1) viewer.objects.protons.push(proton);\n          proton.material.visible = true;\n          proton.material.opacity = 1;\n          proton.material.transparent = false;\n        } else {\n//      viewer.objects.protons = viewer.objects.protons.filter(function (e) { return e !== proton; });\n          proton.material.visible = false;\n          proton.material.opacity = 0;\n          proton.material.transparent = true;\n        }\n      }\n    }\n\n    /**\n     * Create the helper XYZ axes.\n     *\n     * @param name\n     * @param length\n     * @param linewidth\n     *\n     * @returns {THREE.AxisHelper}\n     */\n    function createHelperAxes(name, length, linewidth) {\n      var opacity = viewer.theme.get(name + '--opacity');\n      var axis = new THREE.AxisHelper(length);\n      axis.name = name;\n      axis.material.linewidth = linewidth;\n      axis.material.opacity = opacity;\n      axis.material.visible = (opacity > .02);\n      axis.material.transparent = (opacity < .97);\n      return axis;\n    }\n\n    function createProtons(geometry, compConf, azNuclet) {\n      var p;\n      switch (azNuclet.state) {\n\n        case 'neutral':\n          geometry.vertices[9].set(\n            0,\n            protonRadius * 0.1616236535868876,\n            protonRadius * .0998889113026354\n          );\n          break;\n\n        case 'beryllium':\n          vids = [0, 2];\n          for (p = 0; p < vids.length; p++) {\n            geometry.vertices[vids[p]].x = geometry.vertices[vids[p]].x * 1.2;\n          }\n          geometry.vertices[9].set(0, protonRadius * 0.2, 0);\n          break;\n\n        case 'boron':\n          vids = [0, 2];\n          for (p = 0; p < vids.length; p++) {\n            geometry.vertices[vids[p]].x = geometry.vertices[vids[p]].x * 1.23;\n            geometry.vertices[vids[p]].y = geometry.vertices[vids[p]].y * 0.95;\n          }\n          vids = [4, 5, 6, 7];\n          for (p = 0; p < vids.length; p++) {\n            geometry.vertices[vids[p]].z = geometry.vertices[vids[p]].z * 0.85;\n          }\n          geometry.vertices[9].set(0, protonRadius * 0.95, 0);\n          break;\n\n        case 'lithium':\n          // Move the top center proton to the correct position.\n          geometry.vertices[9].set(\n            0,\n            protonRadius * 0.1616236535868876,\n            protonRadius * .0998889113026354\n          );\n          break;\n\n        case 'initial':\n        case 'final':\n          break;\n\n        case 'carbon':\n          break;\n      }\n\n      // Create protons\n      azNuclet.protons = [];\n      azNuclet.protonGeometry = geometry;\n      var opacity = viewer.theme.get('proton--opacity');\n      for (p in compConf.protons) {\n        if (!compConf.protons.hasOwnProperty(p)) continue;\n        var visible = (azNuclet.conf.protons.indexOf(parseInt(p)) > -1);\n        compConf.protons[p].visible = (azNuclet.conf.protons.indexOf(parseInt(p)) > -1);\n        var proton = makeProton(compConf.protons[p], opacity, geometry.vertices[p], azNuclet);\n//          addObject('protons', proton);\n        azNuclet.protons[p] = proton;\n      }\n      return azNuclet.protons;\n    }\n\n    function createValenceRings(compConf, azNuclet) {\n      var color = viewer.theme.get('valence-active--color');\n      var opacity = viewer.theme.get('valence--opacity');\n      var radius = viewer.theme.get('valence--scale') * protonRadius;\n      var diameter = viewer.theme.get('valence--diameter') * protonRadius;\n\n      azNuclet.rings = [];\n      for (var v in compConf.valence) {\n        var ringConf = compConf.valence[v];\n\n        var torusGeometry = new THREE.TorusGeometry(radius, diameter, 10, 40);\n        var material = new THREE.MeshPhongMaterial({\n          color: color,\n          opacity: opacity,\n          transparent: (opacity < constants.transparentThresh),\n          visible: (opacity > constants.visibleThresh)\n        });\n        var ring = new THREE.Mesh(torusGeometry, material);\n        ring.name = 'valence-active';\n        ring.az = ringConf;\n        azNuclet.rings[v] = ring;\n        if (ringConf.rotation) {\n          if (ringConf.rotation.x) {\n            ring.rotation.x = ringConf.rotation.x / 360 * 2 * Math.PI;\n          }\n          if (ringConf.rotation.y) {\n            ring.rotation.y = ringConf.rotation.y / 360 * 2 * Math.PI;\n          }\n          if (ringConf.rotation.z) {\n            ring.rotation.z = ringConf.rotation.z / 360 * 2 * Math.PI;\n          }\n        }\n        azNuclet.protons[parseInt(v)].add(ring);\n      }\n    }\n\n    function createTetrahedrons(compConf, geometry, azNuclet) {\n      azNuclet.tetrahedrons = [];\n      for (var i = 0; i < compConf.tetrahedrons.length; i++) {\n        var tetrahedron = createTetrahedron('tetra');\n        tetrahedron.azid = 't' + i;\n//    intersectList.push(tetrahedron.children[1]); // Attach the faces Mesh\n        azNuclet.tetrahedrons[i] = tetrahedron;\n\n        // Set 4 vertices of tetrahedron\n        tetrahedron.children[1].geometry.protons = [];\n        for (var v = 0; v < 4; v++) {\n\n          var p = compConf.tetrahedrons[i].vertices[v];\n          tetrahedron.children[0].geometry.vertices[v].x = geometry.vertices[p].x;\n          tetrahedron.children[0].geometry.vertices[v].y = geometry.vertices[p].y;\n          tetrahedron.children[0].geometry.vertices[v].z = geometry.vertices[p].z;\n\n          tetrahedron.children[1].geometry.vertices[v].x = geometry.vertices[p].x;\n          tetrahedron.children[1].geometry.vertices[v].y = geometry.vertices[p].y;\n          tetrahedron.children[1].geometry.vertices[v].z = geometry.vertices[p].z;\n\n          // Save the proton list in tetrafaces mesh\n          tetrahedron.protons[v] = azNuclet.protons[p];\n        }\n      }\n      return azNuclet.tetrahedrons;\n    }\n\n    function createElectrons(groupName, geometry, compConf, nucletConf) {\n      var opacity = viewer.theme.get('electron--opacity') || 1;\n      var scale = viewer.theme.get(groupName + '--scale');\n      var electrons = [];\n      for (var e in compConf.electrons) {\n        if (!compConf.electrons.hasOwnProperty(e)) continue;\n        if (nucletConf.electrons && !nucletConf.electrons.contains(e)) continue;\n        var vertice = geometry.vertices[e];\n        var electron = makeObject('electron',\n          {\n            phong: {\n              color: viewer.theme.get('electron--color'),\n              opacity: opacity,\n              transparent: (opacity < constants.transparentThresh),\n              visible: (opacity > constants.visibleThresh)\n            }\n          },\n          {\n            scale: viewer.theme.get('proton--scale'),\n            radius: electronRadius\n          },\n          {\n            x: vertice.x * scale,\n            y: vertice.y * scale,\n            z: vertice.z * scale\n          }\n        );\n        electron.name = 'electron';\n        addObject('electrons', electron);\n        electrons[e] = electron;\n      }\n      return electrons;\n    }\n\n    function createWireframe(name, geometry, compConf) {\n      var wireframe;\n      if (compConf.shape == 'dodecahedron' || compConf.shape == 'hexahedron') {\n        wireframe = createGeometryLines(\n          name,\n          compConf.scale + .02,\n//      1 + .02,\n          geometry,\n          compConf.rotation || null\n        );\n      } else {\n        wireframe = createGeometryWireframe(\n          name,\n          compConf.scale + .02,\n//      1 + .02,\n          geometry,\n          compConf.rotation || null\n        );\n      }\n      return wireframe;\n    }\n\n    function createNucletGroupGeometry(groupName, geoGroup, compConf, nucletGroup, azNuclet) {\n      var geometry = createGeometry(\n        compConf.shape,\n        azNuclet.state || '',\n        compConf.scale * protonRadius,\n        (compConf.scaleHeight || 1) * protonRadius\n      );\n      geometry.compConf = compConf;\n      geometry.scaleInit = compConf.scale;\n\n      var radians;\n      if (geoGroup.rotation) {\n        if (geoGroup.rotation.x) {\n          radians = geoGroup.rotation['x'] / 360 * 2 * Math.PI;\n          geometry.applyMatrix(new THREE.Matrix4().makeRotationX(radians));\n        }\n        if (geoGroup.rotation.y) {\n          radians = geoGroup.rotation['y'] / 360 * 2 * Math.PI;\n          geometry.applyMatrix(new THREE.Matrix4().makeRotationY(radians));\n        }\n        if (geoGroup.rotation.z) {\n          radians = geoGroup.rotation['z'] / 360 * 2 * Math.PI;\n          geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(radians));\n        }\n      }\n\n      if (compConf.protons) {\n        var protons = createProtons(geometry, compConf, azNuclet);\n        for (var p = 0; p < protons.length; p++) {\n          if (protons[p]) {\n            nucletGroup.add(protons[p]);\n          }\n        }\n      }\n\n      if (compConf.valence) {\n        createValenceRings(compConf, azNuclet);\n      }\n\n      if (compConf.tetrahedrons) {\n        var tetrahedrons = createTetrahedrons(compConf, geometry, azNuclet);\n        for (var t = 0; t < tetrahedrons.length; t++) {\n          nucletGroup.add(tetrahedrons[t]);\n        }\n      }\n\n      if (compConf.electrons) {\n        var electrons = createElectrons(groupName, geometry, compConf, azNuclet.conf);\n        for (var e = 0; e < electrons.length; e++) {\n          nucletGroup.add(electrons[e]);\n        }\n      }\n\n      if (compConf.axes) {\n        nucletGroup.add(createAxes(groupName, compConf.axes, geometry));\n      }\n\n      if (compConf.wireframe) {\n        nucletGroup.add(createWireframe(groupName + 'Wireframe', geometry, compConf));\n      }\n\n      if (compConf.faces) {\n        var reactiveState;\n        if (compConf.assignFaceOpacity && azNuclet.conf.reactiveState) {\n          var reactiveState = (azNuclet.conf.reactiveState[groupName]) ? azNuclet.conf.reactiveState[groupName].slice() : [];\n          geometry.reactiveState = azNuclet.reactiveState = reactiveState;\n          geometry.compConf = compConf;\n        }\n\n        var faces = createGeometryFaces(\n          groupName + 'Faces',\n          compConf.scale,\n          geometry,\n          compConf.rotation || null,\n          azNuclet.reactiveState\n        );\n        nucletGroup.add(faces);\n//    viewer.objects['selectFace'] = [faces];\n      }\n\n      if (compConf.vertexids) {\n        nucletGroup.add(viewer.sprites.createVerticeIds(groupName, geometry));\n      }\n\n      if (compConf.faceids) {\n        nucletGroup.add(viewer.sprites.createFaceIds(groupName, geometry));\n      }\n\n      if (compConf.particleids) {\n        nucletGroup.add(viewer.sprites.createVerticeIds(compConf.particleids, geometry));\n      }\n      return geometry;\n    }\n\n    function createNucletGroup(groupName, geoGroup, azNuclet) {\n      var nucletGroup = new THREE.Group();\n      nucletGroup.name = groupName;\n      var tscale = parseFloat(viewer.theme.get(groupName + '--scale'));\n      nucletGroup.scale.set(tscale, tscale, tscale);\n\n      if (geoGroup.alignyaxis) {\n        var vertice1 = azNuclet.protonGeometry.vertices[geoGroup.alignyaxis.vertices[0]];\n        var vertice2 = azNuclet.protonGeometry.vertices[geoGroup.alignyaxis.vertices[1]];\n        var newAxis = vertice1.clone().sub(vertice2);\n        Drupal.atomizer.base.alignObjectToAxis(\n          nucletGroup,\n          new THREE.Vector3(0, 1, 0),\n          newAxis.clone().normalize(),\n          false\n        );\n        var origin = new THREE.Vector3(0, 0, 0);\n        var attachPt = origin.add(newAxis).multiplyScalar(geoGroup.alignyaxis.attachPt);\n        nucletGroup.position.set(attachPt.x, attachPt.y, attachPt.z);\n\n        var radians = geoGroup.alignyaxis.rotatey / 360 * 2 * Math.PI;\n        nucletGroup.rotation['y'] = radians;\n      }\n\n      // Create each of the components for this group\n      for (var compName in geoGroup.components) {\n        if (!geoGroup.components.hasOwnProperty(compName)) continue;\n        var compConf = geoGroup.components[compName];\n        createNucletGroupGeometry(groupName, geoGroup, compConf, nucletGroup, azNuclet);\n      }\n      return nucletGroup;\n    }\n\n    /**\n     * Create a nuclet as defined in the nucletConf array.\n     *\n     * @param nucletConf\n     *\n     * @returns {THREE.Group}\n     */\n    function createNuclet(id, nucletConf) {\n      var nuclet = new THREE.Group();\n      nuclet.name = 'nuclet-' + id;\n      nucletConf.state = nucletConf.state.replace('backbone-', '');\n\n      // Determine of it's capped here'\n      nuclet.az = {\n        protonRadius: protonRadius,\n        conf: nucletConf,\n        id: id,\n        state: nucletConf.state\n      };\n\n      nuclet.geo = drupalSettings.atomizer_config.objects[nucletConf.state];\n\n      var protons;\n      var electrons;\n      switch (nuclet.az.state) {\n        case 'dodecahedron':\n          protons = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n          break;\n        case 'neutral':\n          protons = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\n          electrons = [0, 1, 2, 3, 4, 5];\n          break;\n        case 'lithium':\n          protons = [0, 1, 3, 4, 5, 9, 11];\n          electrons = [0, 1, 2];\n          break;\n        case 'beryllium':\n          protons = [1, 3, 4, 5, 6, 7, 9, 10, 11];\n          electrons = [0, 1, 2];\n          break;\n        case 'boron':\n          protons = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11];\n          electrons = [0, 1, 2];\n          break;\n        case 'initial':\n        case 'final':\n          protons = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\n          electrons = [0, 1, 2, 3, 4, 5];\n          break;\n        case 'carbon':\n        case 'icosahedron':\n          protons = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n          electrons = [0, 1, 2, 3, 4, 5];\n      }\n\n      // If the configuration for protons and electrons is not set then use the default values set above.\n      // @TODO This needs to be pulled from configuration, get rid of the above switch statement.\n      if (!nuclet.az.conf.electrons) nuclet.az.conf.electrons = electrons;\n      if (!nuclet.az.conf.protons) nuclet.az.conf.protons = protons;\n\n      // Remove the attach proton if this isn't 'N0'\n      if (id != 'N0') {\n        var i = nuclet.az.conf.protons.indexOf(10);\n        if (i > -1) nuclet.az.conf.protons[i] = undefined;\n        // If this is a child nuclet and it's boron then remove one proton from the base boron.\n        if (nuclet.az.conf.state === 'boron') {\n          var i = nuclet.az.conf.protons.indexOf(0);\n          if (i > -1) {\n            nuclet.az.conf.protons[i] = undefined;\n          }\n        }\n      }\n\n      // Loop through each of the Geometry Groups - Ex: Proton framework, icosahedron, dodecahedron, etc.\n      for (var groupName in nuclet.geo.geoGroups) {\n        if (!nuclet.geo.geoGroups.hasOwnProperty(groupName)) continue;\n        var geoGroup = nuclet.geo.geoGroups[groupName];\n\n        var nucletGroup = createNucletGroup(groupName, geoGroup, nuclet.az);\n        nuclet.add(nucletGroup);\n      }\n\n      // Create nuclet helper axes.\n      nuclet.add(createHelperAxes('nucletAxes', protonRadius * 6, 1));\n\n      //// Set the nuclet rotation\n      if (nuclet.az.conf.rotation) {\n        for (var i in axes) {\n          var axis = axes[i];\n          if (nuclet.az.conf.rotation[axis]) {\n            var radians = nuclet.az.conf.rotation[axis] / 360 * 2 * Math.PI;\n            nuclet.rotation['init_' + axis] = radians;\n            nuclet.rotation[axis] = radians;\n          }\n        }\n      }\n\n      //// Add attachAxis line\n      var geometry = createGeometry('icosahedron', '', protonRadius, 1);\n      geometry.applyMatrix(new THREE.Matrix4().makeRotationY(90 / 360 * 2 * Math.PI));\n      var line = createLine('attach', [geometry.vertices[9], geometry.vertices[10]], viewer.theme.get('attachLines--opacity'));\n      line.scale.set(5, 5, 5);\n      nuclet.add(line);\n\n      //// Create inner shell\n      var innerShell = new THREE.Object3D();\n      innerShell.name = 'nucletInner-' + id;\n      innerShell.add(nuclet);\n\n      // Create inner shell helper axis\n      innerShell.add(createHelperAxes('nucletInnerAxes', protonRadius * 5, 3));\n\n      //// Create outer shell\n      var outerShell = new THREE.Object3D();\n      outerShell.name = 'nucletOuter-' + id;\n      outerShell.add(innerShell);\n\n      // Create outer shell helper axis\n      outerShell.add(createHelperAxes('nucletOuterAxes', protonRadius * 4, 5));\n\n      //// Set the nucletShell position\n      if (nuclet.az.conf.position) {\n        outerShell.position.x = nuclet.az.conf.position.x || 0;\n        outerShell.position.y = nuclet.az.conf.position.y || 0;\n        outerShell.position.z = nuclet.az.conf.position.z || 0;\n      }\n      return outerShell;\n    }\n\n    /**\n     * Delete a nuclet from the scene.\n     *\n     * @param nuclet\n     */\n    function deleteNuclet(nuclet) {\n\n      // If there is a '0' nuclet, delete it recursively\n      if (viewer.atom.az().nuclets[nuclet.az.id + '0']) {\n        deleteNuclet(viewer.atom.az().nuclets[nuclet.az.id + '0'])\n      }\n\n      // If there is a '1' nuclet, delete it recursively\n      if (viewer.atom.az().nuclets[nuclet.az.id + '1']) {\n        deleteNuclet(viewer.atom.az().nuclets[nuclet.az.id + '1'])\n      }\n\n      // Delete protons\n      for (var i = 0; i < nuclet.az.protons.length; i++) {\n        if (nuclet.az.protons[i]) {\n          deleteProtons([nuclet.az.protons[i]]);\n        }\n      }\n\n      // Remove nuclet from the atom\n      delete viewer.atom.az().nuclets[nuclet.az.id];\n      nuclet.parent.parent.parent.remove(nuclet.parent.parent);\n    }\n\n    /**\n     * Create an n-sided pyramid.\n     *\n     * @param n\n     * @param rad\n     * @param len\n     * @returns {THREE.Geometry}\n     */\n    function createPyramid(n, rad, len) {\n      var len2 = len / 2;\n      var geom = new THREE.Geometry();\n\n      // Create the apexes\n      geom.vertices.push(new THREE.Vector3(0, len2, 0));\n      // Then the vertices of the base\n      var inc = 2 * Math.PI / n;\n      for (var i = 0, a = Math.PI; i < n; i++, a += inc) {\n        var cos = Math.cos(a);\n        var sin = Math.sin(a);\n        geom.vertices.push(new THREE.Vector3(rad * cos, -len2, rad * sin));\n      }\n\n      // push the n triangular faces...\n      for (var i = 1; i < n; i++) {\n        geom.faces.push(new THREE.Face3(i + 1, i, 0));\n      }\n      // push the last face\n      geom.faces.push(new THREE.Face3(1, n, 0));       // top\n\n      // push the n-2 faces of the base\n      for (var i = 2; i < n; i++) {\n        geom.faces.push(new THREE.Face3(i, i + 1, 1));\n      }\n      // set face normals and return the geometry\n      geom.computeFaceNormals();\n      return geom;\n    }\n\n    /**\n     * Create an n-sided bi pyramid.\n     *\n     * @param n\n     * @param rad\n     * @param len\n     * @returns {THREE.Geometry}\n     */\n    function createBiPyramid(n, rad, len) {\n      var geom = new THREE.Geometry();\n      mesth\n\n      // Create the apexes\n      geom.vertices.push(new THREE.Vector3(0, len, 0));\n      geom.vertices.push(new THREE.Vector3(0, -len, 0));\n      // Then the vertices of the base\n      var inc = 2 * Math.PI / n;\n      for (var i = 0, a = Math.PI; i < n; i++, a += inc) {\n        var cos = Math.cos(a);\n        var sin = Math.sin(a);\n        geom.vertices.push(new THREE.Vector3(rad * cos, 0, rad * sin));\n      }\n\n      // push the n triangular faces...\n      for (var i = 2; i < n + 1; i++) {\n        geom.faces.push(new THREE.Face3(i + 1, i, 0));   // top pyramid\n        geom.faces.push(new THREE.Face3(1, i, i + 1));   // bottom pyramid\n      }\n      // push the last face\n      geom.faces.push(new THREE.Face3(2, n + 1, 0));       // top\n      geom.faces.push(new THREE.Face3(1, n + 1, 2));       // bottom\n      // set face normals and return the geometry\n      geom.computeFaceNormals();\n      return geom;\n    }\n\n    /**\n     * Create the ghost proton and wireframe that appear when hovering over a valid face to add a proton.\n     *\n     * @param type\n     * @returns {THREE.Group}\n     */\n    var createTetrahedron = function createTetrahedron(type) {\n      // Create a new ghost wireframe\n      var tetrahedron = new THREE.Group();\n      tetrahedron.name = 'tetrahedron';\n      tetrahedron.protons = [];\n      tetrahedron.protonRadius = protonRadius;\n\n      var geometry = new THREE.TetrahedronGeometry(viewer.nuclet.protonRadius * 1.222);\n      geometry.dynamic = true;\n\n      // Create Wireframe\n      tetrahedron.add(viewer.nuclet.createGeometryWireframe(\n        type + 'Wireframe',\n        1,\n        geometry,\n        null,\n        null\n      ));\n\n      // Create faces\n      tetrahedron.add(viewer.nuclet.createGeometryFaces(\n        type + 'Faces',\n        1,\n        geometry,\n        null,\n        null\n      ));\n\n      return tetrahedron;\n    };\n\n    /**\n     * Add an object to the objects array.\n     *\n     * @param name\n     * @param object\n     */\n    function addObject(name, object) {\n      if (!viewer.objects) viewer.objects = {};\n      if (viewer.objects[name]) {\n        viewer.objects[name].push(object);\n      } else {\n        viewer.objects[name] = [object];\n      }\n    }\n\n    // Return references to class functions - makes this into a pseudo-class.\n    return {\n      makeObject: makeObject,\n      makeProton: makeProton,\n      showProtons: showProtons,\n      createNuclet: createNuclet,\n      deleteNuclet: deleteNuclet,\n      createGeometry: createGeometry,\n      createGeometryWireframe: createGeometryWireframe,\n      createGeometryFaces: createGeometryFaces,\n      protonRadius: protonRadius\n    };\n  };\n\n})(jQuery);\n"]}