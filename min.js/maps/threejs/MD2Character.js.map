{"version":3,"sources":["threejs/MD2Character.js"],"names":["THREE","MD2Character","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","checkLoadingComplete","mapping","UVMapping","name","createPart","geometry","skinMap","materialWireframe","MeshLambertMaterial","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","Mesh","rotation","y","Math","PI","castShadow","receiveShadow","scope","loadCounter","onLoadComplete","this","scale","animationFPS","root","Object3D","meshBody","meshWeapon","skinsBody","skinsWeapon","weapons","activeAnimation","mixer","loadParts","config","skins","weaponsTextures","loader","MD2Loader","body","geo","computeBoundingBox","position","boundingBox","min","set","add","clipOffset","activeAnimationClipName","animations","AnimationMixer","index","visible","generateCallback","setPlaybackRate","rate","timeScale","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","syncWeaponAnimation","setAnimation","clipName","activeAction","stop","action","clipAction","play","activeClipName","syncWith","update","delta"],"mappings":"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","file":"../../threejs/MD2Character.js","sourcesContent":["/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MD2Character = function () {\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.scale = 1;\r\n\tthis.animationFPS = 6;\r\n\r\n\tthis.root = new THREE.Object3D();\r\n\r\n\tthis.meshBody = null;\r\n\tthis.meshWeapon = null;\r\n\r\n\tthis.skinsBody = [];\r\n\tthis.skinsWeapon = [];\r\n\r\n\tthis.weapons = [];\r\n\r\n\tthis.activeAnimation = null;\r\n\r\n\tthis.mixer = null;\r\n\r\n\tthis.onLoadComplete = function () {};\r\n\r\n\tthis.loadCounter = 0;\r\n\r\n\tthis.loadParts = function ( config ) {\r\n\r\n\t\tthis.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\r\n\r\n\t\tvar weaponsTextures = [];\r\n\t\tfor ( var i = 0; i < config.weapons.length; i ++ ) weaponsTextures[ i ] = config.weapons[ i ][ 1 ];\r\n\t\t// SKINS\r\n\r\n\t\tthis.skinsBody = loadTextures( config.baseUrl + \"skins/\", config.skins );\r\n\t\tthis.skinsWeapon = loadTextures( config.baseUrl + \"skins/\", weaponsTextures );\r\n\r\n\t\t// BODY\r\n\r\n\t\tvar loader = new THREE.MD2Loader();\r\n\r\n\t\tloader.load( config.baseUrl + config.body, function( geo ) {\r\n\r\n\t\t\tgeo.computeBoundingBox();\r\n\t\t\tscope.root.position.y = - scope.scale * geo.boundingBox.min.y;\r\n\r\n\t\t\tvar mesh = createPart( geo, scope.skinsBody[ 0 ] );\r\n\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\r\n\r\n\t\t\tscope.root.add( mesh );\r\n\r\n\t\t\tscope.meshBody = mesh;\r\n\r\n\t\t\tscope.meshBody.clipOffset = 0;\r\n\t\t\tscope.activeAnimationClipName = mesh.geometry.animations[0].name;\r\n\r\n\t\t\tscope.mixer = new THREE.AnimationMixer( mesh );\r\n\r\n\t\t\tcheckLoadingComplete();\r\n\r\n\t\t} );\r\n\r\n\t\t// WEAPONS\r\n\r\n\t\tvar generateCallback = function ( index, name ) {\r\n\r\n\t\t\treturn function( geo ) {\r\n\r\n\t\t\t\tvar mesh = createPart( geo, scope.skinsWeapon[ index ] );\r\n\t\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\r\n\t\t\t\tmesh.visible = false;\r\n\r\n\t\t\t\tmesh.name = name;\r\n\r\n\t\t\t\tscope.root.add( mesh );\r\n\r\n\t\t\t\tscope.weapons[ index ] = mesh;\r\n\t\t\t\tscope.meshWeapon = mesh;\r\n\r\n\t\t\t\tcheckLoadingComplete();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i < config.weapons.length; i ++ ) {\r\n\r\n\t\t\tloader.load( config.baseUrl + config.weapons[ i ][ 0 ], generateCallback( i, config.weapons[ i ][ 0 ] ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setPlaybackRate = function ( rate ) {\r\n\r\n\t\tif( rate !== 0 ) {\r\n\t\t\tthis.mixer.timeScale = 1 / rate;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.mixer.timeScale = 0;\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setWireframe = function ( wireframeEnabled ) {\r\n\r\n\t\tif ( wireframeEnabled ) {\r\n\r\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialWireframe;\r\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialWireframe;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialTexture;\r\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialTexture;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setSkin = function( index ) {\r\n\r\n\t\tif ( this.meshBody && this.meshBody.material.wireframe === false ) {\r\n\r\n\t\t\tthis.meshBody.material.map = this.skinsBody[ index ];\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setWeapon = function ( index ) {\r\n\r\n\t\tfor ( var i = 0; i < this.weapons.length; i ++ ) this.weapons[ i ].visible = false;\r\n\r\n\t\tvar activeWeapon = this.weapons[ index ];\r\n\r\n\t\tif ( activeWeapon ) {\r\n\r\n\t\t\tactiveWeapon.visible = true;\r\n\t\t\tthis.meshWeapon = activeWeapon;\r\n\r\n\t\t\tscope.syncWeaponAnimation();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setAnimation = function ( clipName ) {\r\n\r\n\t\tif ( this.meshBody ) {\r\n\r\n\t\t\tif( this.meshBody.activeAction ) {\r\n\t\t\t\tthis.meshBody.activeAction.stop();\r\n\t\t\t\tthis.meshBody.activeAction = null;\r\n\t\t\t}\r\n\r\n\t\t\tvar action = this.mixer.clipAction( clipName, this.meshBody );\r\n\t\t\tif( action ) {\r\n\r\n\t\t\t\tthis.meshBody.activeAction = action.play();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tscope.activeClipName = clipName;\r\n\r\n\t\tscope.syncWeaponAnimation();\r\n\r\n\t};\r\n\r\n\tthis.syncWeaponAnimation = function() {\r\n\r\n\t\tvar clipName = scope.activeClipName;\r\n\r\n\t\tif ( scope.meshWeapon ) {\r\n\r\n\t\t\tif( this.meshWeapon.activeAction ) {\r\n\t\t\t\tthis.meshWeapon.activeAction.stop();\r\n\t\t\t\tthis.meshWeapon.activeAction = null;\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = this.meshWeapon.geometry,\r\n\t\t\t\tanimations = geometry.animations;\r\n\r\n\t\t\tvar action = this.mixer.clipAction( clipName, this.meshWeapon );\r\n\t\t\tif( action ) {\r\n\r\n\t\t\t\tthis.meshWeapon.activeAction =\r\n\t\t\t\t\t\taction.syncWith( this.meshBody.activeAction ).play();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.update = function ( delta ) {\r\n\r\n\t\tif( this.mixer ) this.mixer.update( delta );\r\n\r\n\t};\r\n\r\n\tfunction loadTextures( baseUrl, textureUrls ) {\r\n\r\n\t\tvar textureLoader = new THREE.TextureLoader();\r\n\t\tvar textures = [];\r\n\r\n\t\tfor ( var i = 0; i < textureUrls.length; i ++ ) {\r\n\r\n\t\t\ttextures[ i ] = textureLoader.load( baseUrl + textureUrls[ i ], checkLoadingComplete );\r\n\t\t\ttextures[ i ].mapping = THREE.UVMapping;\r\n\t\t\ttextures[ i ].name = textureUrls[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t}\r\n\r\n\tfunction createPart( geometry, skinMap ) {\r\n\r\n\t\tvar materialWireframe = new THREE.MeshLambertMaterial( { color: 0xffaa00, wireframe: true, morphTargets: true, morphNormals: true } );\r\n\t\tvar materialTexture = new THREE.MeshLambertMaterial( { color: 0xffffff, wireframe: false, map: skinMap, morphTargets: true, morphNormals: true } );\r\n\r\n\t\t//\r\n\r\n\t\tvar mesh = new THREE.Mesh( geometry, materialTexture );\r\n\t\tmesh.rotation.y = - Math.PI / 2;\r\n\r\n\t\tmesh.castShadow = true;\r\n\t\tmesh.receiveShadow = true;\r\n\r\n\t\t//\r\n\r\n\t\tmesh.materialTexture = materialTexture;\r\n\t\tmesh.materialWireframe = materialWireframe;\r\n\r\n\t\treturn mesh;\r\n\r\n\t}\r\n\r\n\tfunction checkLoadingComplete() {\r\n\r\n\t\tscope.loadCounter -= 1;\r\n\r\n\t\tif ( scope.loadCounter === 0 ) scope.onLoadComplete();\r\n\r\n\t}\r\n\r\n};\r\n"]}