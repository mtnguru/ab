{"version":3,"sources":["popups/popups_base.js"],"names":["$","Drupal","imager","popups","initDialog","name","buttonId","processFunc","popup","Popups","$button","$selectButton","click","dialogToggle","baseC","spec","settings","dialogClass","$elem","dialogHave","dialogLoad","core","ajaxProcess","actions","renderDialog","url","action","dialogName","dialogCreate","response","$callingElement","$wrapper","append","cssId","cssIdFinal","removeClass","addClass","dialog","dialogOnCreate","dialogIsOpen","dialogClose","dialogOnClose","dialogOpen","extend","dialogOnOpen","setSelectButton","position","my","at","of","dialogUpdate","jQuery"],"mappings":"CA+CA,SAAWA,GACT,aAkBAC,OAAOC,OAAOC,OAAOC,WAAa,SAAoBC,EAAMC,EAAUC,GACpE,IACIC,EADAC,EAASR,OAAOC,OAAOC,OAE3B,GAAIG,EAAU,CACZ,IAAII,EAAUV,EAAEM,GACZI,IAEFF,EAAQC,EAAOJ,EAAO,MAAMM,cAAeD,IACvCH,EACFG,EAAQE,MAAML,GAGdG,EAAQE,MAAMJ,EAAMK,oBAMxBL,EAAQC,EAAOJ,EAAO,MAAMM,cAAe,OAG7C,OADAF,EAAOJ,GAAQG,EACRA,GAGTP,OAAOC,OAAOC,OAAOW,MAAQ,SAAeC,GAC1C,IAAIP,KACJA,EAAMQ,YAGN,IAAIL,GAFJI,EAAOA,OAEkBJ,eAAiB,KA8G1C,OA5GAH,EAAMO,KAAOA,MACbP,EAAMO,KAAKV,KAAOG,EAAMO,KAAKV,MAAQ,UACrCG,EAAMO,KAAKE,YAAcT,EAAMO,KAAKE,aAAe,GACnDT,EAAMO,KAAKG,MAAQV,EAAMO,KAAKG,OAAS,KAGvCV,EAAMW,WAAa,WACjB,QAAQX,EAAMO,KAAU,OAI1BP,EAAMY,WAAa,WACjBnB,OAAOC,OAAOmB,KAAKC,YAAYd,EAC7BP,OAAOC,OAAOc,SAASO,QAAQC,aAAaC,KAE1CC,OAAQ,gBACRC,WAAYnB,EAAMO,KAAKV,MAEzBG,EAAMoB,eAIVpB,EAAMoB,aAAe,SAAsBC,EAAUC,GACnD7B,OAAOC,OAAO6B,SAASC,OAAOH,EAAe,MAC7CrB,EAAMO,KAAKG,MAAQlB,EAAE,IAAMQ,EAAMO,KAAKkB,OAClCzB,EAAMO,KAAKmB,YACb1B,EAAMO,KAAKG,MAAMiB,YAAY3B,EAAMO,KAAKkB,OAAOG,SAAS5B,EAAMO,KAAKmB,YAEzD1B,EAAMO,KAAKG,MACjBmB,OAAO7B,EAAMO,MAEnBP,EAAM8B,kBAGR9B,EAAM+B,aAAe,WACnB,SAAQ/B,EAAMO,KAAKG,QAASV,EAAMO,KAAKG,MAAMmB,OAAO,YAItD7B,EAAMgC,YAAc,WACdhC,EAAMO,KAAKG,QACTP,GACFA,EAAcwB,YAAY,WAExB3B,EAAMO,KAAKG,MAAMmB,OAAO,WAC1B7B,EAAMO,KAAKG,MAAMmB,OAAO,SAE1B7B,EAAMiC,gBACNjC,EAAMQ,cAKVR,EAAMkC,WAAa,SAAoB1B,GACrChB,EAAE2C,OAAOnC,EAAMQ,SAAUA,GACrBR,EAAMO,KAAKG,OACTP,GACFA,EAAcyB,SAAS,WAEpB5B,EAAMO,KAAKG,MAAMmB,OAAO,YAC3B7B,EAAMO,KAAKG,MAAMmB,OAAO,QACxB7B,EAAMoC,iBAIRpC,EAAMY,cAKVZ,EAAMK,aAAe,SAAsBG,GACzChB,EAAE2C,OAAOnC,EAAMQ,SAAUA,GACrBR,EAAMW,aACJX,EAAM+B,eACR/B,EAAMgC,cAGNhC,EAAMkC,WAAW1B,GAInBR,EAAMY,cAIVZ,EAAMqC,gBAAkB,SAAyB3B,GAC/CV,EAAMO,KAAKJ,cAAgBO,EACvBV,EAAMW,cACRX,EAAMO,KAAKG,MAAMmB,QACfS,UACEC,GAAI,OACJC,GAAI,QACJC,GAAI/B,MAOZV,EAAM0C,aAAe,aAErB1C,EAAM8B,eAAiB,aAEvB9B,EAAMoC,aAAe,aAErBpC,EAAMiC,cAAgB,aAGfjC,GA9JX,CAgKG2C","file":"../../popups/popups_base.js","sourcesContent":["/**\n * @file\n * Declare Imager module base class - Drupal.imager.popups.baseC.\n *\n * The dialog base class is the basis for all popups in the Imager module.\n *\n * When a dialog is opened for the first time an AJAX call is made which loads\n * the render array for the dialog and renders it.  The resulting HTML is then\n * inserted into the content area of the dialog.\n *\n * The easy way to open a dialog is to call dialogToggle.  The base class\n * loads the dialog if necessary, it then opens the dialog and calls\n * dialogOnOpen().  This results in the following logic:\n *\n * First column is the implementing class - either baseC or impC.\n * Substitute impC with the name of a real class implementing a baseC dialog.\n *\n * baseC  dialogToggle()\n * baseC    if dialogHave()\n * baseC      if dialogIsOpen()\n * baseC        dialogClose()\n * impC           dialogOnClose()\n *            else\n * baseC        dialogOpen()\n * impC           dialogOnOpen()\n * impC             dialogUpdate()\n *          else\n * baseC       dialogLoad()\n * baseC          dialogCreate()\n * impC              dialogOnCreate()\n * baseC                dialogOpen()\n * impC                    dialogOnOpen()\n * impC                       dialogUpdate()\n */\n\n/*\n * Note: Variables ending with capital C or M designate Classes and Modules.\n * They can be found in their own files using the following convention:\n *   i.e. Drupal.imager.coreM is in file imager/js/imager.core.js\n *        Drupal.imager.popups.baseC is in file imager/js/popups/imager.base.js.\n */\n\n/**\n * Wrap file in JQuery();.\n *\n * @param $\n */\n(function ($) {\n  'use strict';\n\n  /**\n   * Initialize a dialog.\n   *\n   * Convenience function to initialize a dialog and set up buttons\n   * to open and close it.\n   *\n   * @param {string} name\n   *   Name of the dialog.\n   * @param {string} buttonId [optional]\n   *   CSS ID of the button which opens and closes this dialog.\n   * @param {Object} processFunc [optional]\n   *   Function to execute when button is clicked.\n   *   If not specified it defaults to dialogToggle().\n   *\n   * @return {baseC} popup\n   */\n  Drupal.imager.popups.initDialog = function initDialog(name, buttonId, processFunc) {\n    var Popups = Drupal.imager.popups;\n    var popup;\n    if (buttonId) {\n      var $button = $(buttonId);\n      if ($button) {\n        // Execute dialogs constructor.\n        popup = Popups[name + 'C']({$selectButton: $button});\n        if (processFunc) {\n          $button.click(processFunc);\n        }\n        else {\n          $button.click(popup.dialogToggle);\n        }\n      }\n    }\n    else {\n      // Execute dialogs constructor.\n      popup = Popups[name + 'C']({$selectButton: null});\n    }\n    Popups[name] = popup;\n    return popup;\n  };\n\n  Drupal.imager.popups.baseC = function baseC(spec) {\n    var popup = {};\n    popup.settings = {};\n    spec = spec || {};\n\n    var $selectButton = spec.$selectButton || null;\n    // The button that was clicked to popup this dialog.\n    popup.spec = spec || {};\n    popup.spec.name = popup.spec.name || 'unknown';\n    popup.spec.dialogClass = popup.spec.dialogClass || '';\n    popup.spec.$elem = popup.spec.$elem || null;\n\n    // Return if popup is loaded.\n    popup.dialogHave = function dialogHave() {\n      return (popup.spec.$elem) ? true : false;\n    };\n\n    // Load the dialog using AJAX.\n    popup.dialogLoad = function dialogLoad() {\n      Drupal.imager.core.ajaxProcess(popup,\n        Drupal.imager.settings.actions.renderDialog.url,\n        {\n          action: 'render-dialog',\n          dialogName: popup.spec.name\n        },\n        popup.dialogCreate);\n    };\n\n    // Popup is loaded, create it.\n    popup.dialogCreate = function dialogCreate(response, $callingElement) {\n      Drupal.imager.$wrapper.append(response['data']);\n      popup.spec.$elem = $('#' + popup.spec.cssId);\n      if (popup.spec.cssIdFinal) {\n        popup.spec.$elem.removeClass(popup.spec.cssId).addClass(popup.spec.cssIdFinal);\n      }\n      var $elem = popup.spec.$elem;\n      $elem.dialog(popup.spec);\n      // Create the popup.\n      popup.dialogOnCreate();\n    };\n\n    popup.dialogIsOpen = function dialogIsOpen() {\n      return (popup.spec.$elem && popup.spec.$elem.dialog('isOpen')) ? true : false;\n    };\n\n    // Close the dialog if it's open.\n    popup.dialogClose = function dialogClose() {\n      if (popup.spec.$elem) {\n        if ($selectButton) {\n          $selectButton.removeClass('checked');\n        }\n        if (popup.spec.$elem.dialog('isOpen')) {\n          popup.spec.$elem.dialog('close');\n        }\n        popup.dialogOnClose();\n        popup.settings = {};\n      }\n    };\n\n    // Open the popup if it exists, otherwise create it.\n    popup.dialogOpen = function dialogOpen(settings) {\n      $.extend(popup.settings, settings);\n      if (popup.spec.$elem) {\n        if ($selectButton) {\n          $selectButton.addClass('checked');\n        }\n        if (!popup.spec.$elem.dialog('isOpen')) {\n          popup.spec.$elem.dialog('open');\n          popup.dialogOnOpen();\n        }\n      }\n      else {\n        popup.dialogLoad();\n      }\n    };\n\n    // Toggle the dialog if it exists, otherwise create it.\n    popup.dialogToggle = function dialogToggle(settings) {\n      $.extend(popup.settings, settings);\n      if (popup.dialogHave()) {\n        if (popup.dialogIsOpen()) {\n          popup.dialogClose();\n        }\n        else {\n          popup.dialogOpen(settings);\n        }\n      }\n      else {\n        popup.dialogLoad();\n      }\n    };\n\n    popup.setSelectButton = function setSelectButton($elem) {\n      popup.spec.$selectButton = $elem;\n      if (popup.dialogHave()) {\n        popup.spec.$elem.dialog({\n          position: {\n            my: 'left',\n            at: 'right',\n            of: $elem\n          }\n        });\n      }\n\n    };\n\n    popup.dialogUpdate = function dialogUpdate() {\n    };\n    popup.dialogOnCreate = function dialogOnCreate() {\n    };\n    popup.dialogOnOpen = function dialogOnOpen() {\n    };\n    popup.dialogOnClose = function dialogOnClose() {\n    };\n\n    return popup;\n  };\n})(jQuery);\n"]}