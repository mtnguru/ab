{"version":3,"sources":["az_shapes.js"],"names":["Drupal","atomizer","shapesC","_viewer","icosahedronGeometry","radius","detail","t","Math","sqrt","vertices","indices","THREE","PolyhedronGeometry","call","this","type","parameters","backboneGeometry","state","numVertices","length","v","offset","x","y","z","push","Vector3","dodecahedronGeometry","r","azfaces","faces","cubeGeometry","createBiPyramid","n","rad","len","geom","Geometry","inc","PI","i","a","cos","sin","Face3","computeFaceNormals","prototype","Object","create","constructor","createPyramid","len2","getGeometry","height"],"mappings":"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","file":"../az_shapes.js","sourcesContent":["/**\n * @file - az_shapes.js\n *\n */\n\nDrupal.atomizer.shapesC = function (_viewer) {\n  var viewer = _viewer;\n  var axes = ['x', 'y', 'z'];\n\n  /**\n   * Create the icosahedron geometry.\n   *\n   * Defines a different order of vertices and indices than the THREE.js library.\n   *\n   * @param radius\n   * @param detail\n   */\n  function icosahedronGeometry ( radius, detail ) {\n    var t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    var vertices = [\n      0,  1,  t,    0, -1,  t,    0,  1, -t,   0, -1, -t,\n      t,  0,  1,    t,  0, -1,   -t,  0, -1,  -t,  0,  1,\n      1,  t,  0,   -1,  t,  0,    1, -t,  0,  -1, -t,  0\n    ];\n\n    var indices = [\n      9,  0,  8,\n      9,  8,  2,\n      10,  1, 11,\n      10, 11,  3,\n      8,  0,  4,\n      1,  4,  0,\n      10,  4,  1,\n      4,  5,  8,\n      10,  5,  4,\n      2,  8,  5,\n      5,  3,  2,\n      10,  3,  5,\n      9,  2,  6,\n      6,  2,  3,\n      3, 11,  6,\n      9,  6,  7,\n      7,  6, 11,\n      9,  7,  0,\n      0,  7,  1,\n      11,  1, 7\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n    this.type = 'IcosahedronGeometry';\n    this.parameters = { radius: radius, detail: detail };\n  }\n  icosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n  icosahedronGeometry.prototype.constructor = icosahedronGeometry;\n\n  /**\n   * Create the backbone geometry.\n   *\n   * This geometry was created manually adding protons one at a time using tetrahedrons to position them\n   *\n   * @param radius\n   * @param detail\n   */\n\n  function backboneGeometry ( state, radius, detail ) {\n    var vertices = [\n      1.3584752137243,1.0361372789803,0,\n      1.5425983561874,-0.95086776219312,0,\n      -1.3584752137243,1.0361372789803,0,\n      -1.5425983561874,-0.95086776219312,0,\n      0.99043524980164,0,-1.6512282239033,\n      -0.99043524980164,0,-1.6512282239033,\n      -0.99043524980164,0,1.6512282239033,\n      0.99043524980164,0,1.6512282239033,\n      0,1.6749956538651,-1.2913717329017,\n      0,1.6749956538651,1.2913717329017,\n      0,-1.605,-1,\n      0,-1.605,1,\n      1.9197063907443,1.7431021759466,1.7651180413022,\n      2.8555615478674,0.17282948323074,0.99775880481776,\n      2.8555615478674,0.17282948323074,-0.99775880481776,\n      1.9197063907443,1.7431021759466,-1.7651180413022,\n      -1.9197063907443,1.7431021759466,-1.7651180413022,\n      -2.8555615478674,0.17282948323074,-0.99775880481776,\n      -2.8555615478674,0.17282948323074,0.99775880481776,\n      -1.9197063907443,1.7431021759466,1.7651180413022,\n       2.85,1.90,0,\n      -2.85,1.90,0\n    ];\n\n    var percent = .094;\n\n    // Set geometry vertices\n    var numVertices = vertices.length / 3;\n    this.vertices = [];\n    for (var v = 0; v < numVertices; v++) {\n      var offset = v * 3;\n      var x = vertices[offset] * radius;\n      var y = vertices[offset + 1] * radius;\n      var z = vertices[offset + 2] * radius;\n\n      // When completing the lithium ring, the carbon ring is squeezed and the gap is changed.{\n      if (state == 'final') {\n        if (v == 0 || v == 2) {\n          x = x * (1 - percent);\n        }\n        if (v == 8 || v == 9) {\n          z = z * (1 + percent);\n        }\n      }\n      this.vertices.push(new THREE.Vector3(x, y, z));\n    }\n\n    this.type = 'BackboneGeometry';\n    this.parameters = { radius: radius, detail: detail };\n  };\n\n  backboneGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n  backboneGeometry.prototype.constructor = backboneGeometry;\n\n  /**\n   * Create the Dodecahedron geometry.\n   *\n   * Defines a different order to the vertices and indices than the THREE.js library.\n   * Adds the azfaces array which defines the faces and wireframes around them.\n   *\n   * @param radius\n   * @param detail\n   */\n  function dodecahedronGeometry ( radius, detail ) {\n\n    var t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    var r = 1 / t;\n\n    var vertices = [\n      1,  1,  1,     r,  t,  0,\n      -r,  t,  0,    -1,  1,  1,\n      0,  r,  t,     1,  1, -1,\n      t,  0,  r,     0, -r,  t,\n      -t,  0,  r,    -1,  1, -1,\n      1, -1, -1,     r, -t,  0,\n      -r, -t,  0,    -1, -1, -1,\n      0, -r, -t,     t,  0, -r,\n      1, -1,  1,    -1, -1,  1,\n      -t,  0, -r,     0,  r, -t\n    ];\n\n    var indices = [\n      15, 10, 14,    15, 14, 19,    15, 19,  5,  //  0\n      5, 19,  9,     5,  9,  2,     5,  2,  1,  //  1\n      14, 13, 18,    14, 18,  9,    14,  9, 19,  //  2\n      10, 11, 12,    10, 12, 13,    10, 13, 14,  //  3\n      6, 16, 11,     6, 11, 10,     6, 10, 15,  //  4\n      0,  6, 15,     0, 15,  5,     0,  5,  1,  //  5\n      9, 18,  8,     9,  8,  3,     9,  3,  2,  //  6\n      13, 12, 17,    13, 17,  8,    13,  8, 18,  //  7\n      17, 12, 11,    17, 11, 16,    17, 16,  7,  //  8\n      4,  7, 16,     4, 16,  6,     4,  6,  0,  //  9\n      3,  4,  0,     3,  0,  1,     3,  1,  2,  // 10\n      8, 17,  7,     8,  7,  4,     8,  4,  3   // 11\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    this.type = 'DodecahedronGeometry';\n\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n\n    this.azfaces = [\n      {  // 0\n        'indices': [5, 19, 14, 10, 15],\n        'faces': [0, 1, 2]\n      },\n      {  // 1\n        'indices': [1, 2, 9, 19, 5],\n        'faces': [3, 4, 5]\n      },\n      {  // 2\n        'indices': [9, 18, 13, 14, 19],\n        'faces': [6, 7, 8]\n      },\n      {  // 3\n        'indices': [10, 11, 12, 13, 14],\n        'faces': [9, 10, 11]\n      },\n      {  // 4\n        'indices': [6, 15, 10, 11, 16],\n        'faces': [12, 13, 14]\n      },\n      {  // 5\n        'indices': [0, 1, 5, 15, 6],\n        'faces': [15, 16, 17]\n      },\n      {  // 6\n        'indices': [2, 3, 8, 18, 9],\n        'faces': [18, 19, 20]\n      },\n      {  // 7\n        'indices': [8, 17, 12, 13, 18],\n        'faces': [21, 22, 23]\n      },\n      {  // 8\n        'indices': [7, 16, 11, 12, 17],\n        'faces': [24, 25, 26]\n      },\n      {  // 9\n        'indices': [0, 6, 16, 7, 4],\n        'faces': [27, 28, 29]\n      },\n      {  // 10\n        'indices': [0, 1, 2, 3, 4],\n        'faces': [30, 31, 32]\n      },\n      {  // 11\n        'indices': [3, 4, 7, 17, 8],\n        'faces': [33, 34, 35]\n      }\n    ];\n  }\n\n  dodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n  dodecahedronGeometry.prototype.constructor = dodecahedronGeometry;\n\n  /**\n   * Create the Cube geometry.\n   *\n   * @param radius\n   * @param detail\n   */\n  function cubeGeometry (radius, detail) {\n    var vertices = [\n      1,  1,  1,     1, -1,  1,\n      1, -1, -1,     1,  1, -1,\n     -1,  1, -1,    -1, -1, -1,\n     -1, -1,  1,    -1,  1,  1\n    ];\n\n    var indices = [\n      0, 1, 3,   1, 2, 3,\n      4, 5, 7,   5, 6, 7,\n      4, 7, 3,   7, 0, 3,\n      6, 5, 1,   5, 2, 1,\n      7, 6, 0,   6, 1, 0,\n      3, 2, 4,   2, 5, 4\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    this.type = 'DodecahedronGeometry';\n\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n\n    this.azfaces = [\n      {  // 0\n        'indices': [0, 1, 2, 3],\n        'faces': [0, 1]\n      },\n      {  // 1\n        'indices': [4, 5, 6, 7],\n        'faces': [2, 3]\n      },\n      {  // 2\n        'indices': [0, 3, 4, 7],\n        'faces': [4, 5]\n      },\n      {  // 3\n        'indices': [1, 6, 5, 2],\n        'faces': [6, 7]\n      },\n      {  // 4\n        'indices': [0, 7, 6, 1],\n        'faces': [8, 9]\n      },\n      {  // 5\n        'indices': [2, 5, 4, 3],\n        'faces': [10, 11]\n      },\n    ];\n  }\n\n  cubeGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n  cubeGeometry.prototype.constructor = cubeGeometry;\n\n  var getGeometry = function (type, state, radius, height, detail) {\n    switch (type) {\n      case 'icosahedron':\n        return new icosahedronGeometry(radius, detail);\n      case 'dodecahedron':\n        return new dodecahedronGeometry(radius, detail);\n      case 'decahedron':\n        return createBiPyramid(5, radius, height, detail);\n      case 'hexahedron':\n        return new cubeGeometry(radius, detail);\n      case 'backbone':\n        return new backboneGeometry(state, radius, detail);\n    }\n  };\n\n  function createPyramid(n, rad, len) {\n    var len2 = len / 2;\n    var geom = new THREE.Geometry();\n\n    // Create the apexes\n    geom.vertices.push(new THREE.Vector3(0, len2, 0));\n    // Then the vertices of the base\n    var inc = 2 * Math.PI / n;\n    for (var i = 0, a = Math.PI; i < n; i++, a += inc) {\n      var cos = Math.cos(a);\n      var sin = Math.sin(a);\n      geom.vertices.push(new THREE.Vector3(rad * cos, -len2, rad * sin));\n    }\n\n    // push the n triangular faces...\n    for (var i = 1; i < n; i++) {\n      geom.faces.push(new THREE.Face3(i + 1, i, 0));\n    }\n    // push the last face\n    geom.faces.push(new THREE.Face3(1, n, 0));       // top\n\n    // push the n-2 faces of the base\n    for (var i = 2; i < n; i++) {\n      geom.faces.push(new THREE.Face3(i, i + 1, 1));\n    }\n    // set face normals and return the geometry\n    geom.computeFaceNormals();\n    return geom;\n  }\n\n  function createBiPyramid(n, rad, len) {\n    var geom = new THREE.Geometry();\n\n    // Create the apexes\n    geom.vertices.push(new THREE.Vector3(0, len, 0));\n    geom.vertices.push(new THREE.Vector3(0, -len, 0));\n    // Then the vertices of the base\n    var inc = 2 * Math.PI / n;\n    for (var i = 0, a = Math.PI; i < n; i++, a += inc) {\n      var cos = Math.cos(a);\n      var sin = Math.sin(a);\n      geom.vertices.push(new THREE.Vector3(rad * cos, 0, rad * sin));\n    }\n\n    // push the n triangular faces...\n    for (var i = 2; i < n + 1; i++) {\n      geom.faces.push(new THREE.Face3(i + 1, i, 0));   // top pyramid\n      geom.faces.push(new THREE.Face3(1, i, i + 1));   // bottom pyramid\n    }\n    // push the last face\n    geom.faces.push(new THREE.Face3(2, n + 1, 0));       // top\n    geom.faces.push(new THREE.Face3(1, n + 1, 2));       // bottom\n    // set face normals and return the geometry\n    geom.computeFaceNormals();\n    return geom;\n  }\n\n  return {\n    createPyramid: createPyramid,\n    createBiPyramid: createBiPyramid,\n    getGeometry: getGeometry,\n  };\n};\n"]}