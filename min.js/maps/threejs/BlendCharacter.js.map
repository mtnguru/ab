{"version":3,"sources":["threejs/BlendCharacter.js"],"names":["THREE","BlendCharacter","this","weightSchedule","warpSchedule","load","url","onLoad","scope","ObjectLoader","loadedObject","traverse","object","SkinnedMesh","skinnedMesh","call","geometry","material","undefined","skinning","mixer","AnimationMixer","i","animations","length","clipAction","console","log","loadJSON","JSONLoader","materials","originalMaterial","update","dt","play","animName","weight","setEffectiveWeight","crossfade","fromAnimName","toAnimName","duration","stopAllAction","fromAction","toAction","crossFadeTo","warp","applyWeight","getWeight","getEffectiveWeight","pauseAll","timeScale","unPauseAll","stopAll","showModel","boolean","visible","prototype","Object","create","constructor","getForward","forward","Vector3","set","matrix","elements"],"mappings":"AAIAA,MAAMC,eAAiB,WAEtBC,KAAKC,kBACLD,KAAKE,gBAELF,KAAKG,KAAO,SAAWC,EAAKC,GAE3B,IAAIC,EAAQN,MAEC,IAAIF,MAAMS,cAChBJ,KAAMC,EAAK,SAAUI,GAiB3B,GAbAA,EAAaC,SAAU,SAAUC,GAE3BA,aAAkBZ,MAAMa,cAE5BL,EAAMM,YAAcF,KAMtBZ,MAAMa,YAAYE,KAAMP,EAAOA,EAAMM,YAAYE,SAAUR,EAAMM,YAAYG,eAGnDC,GAArBV,EAAMM,YAAX,CAOAN,EAAMS,SAASE,UAAW,EAE1BX,EAAMY,MAAQ,IAAIpB,MAAMqB,eAAgBb,GACxCA,EAAMY,MAAQZ,EAAMY,MAGpB,IAAM,IAAIE,EAAI,EAAGA,EAAId,EAAMQ,SAASO,WAAWC,SAAWF,EAEzDd,EAAMY,MAAMK,WAAYjB,EAAMQ,SAASO,WAAYD,SAKpCJ,IAAXX,GAAuBA,SAlB3BmB,QAAQC,IAAK,kCAAoCrB,MAwBpDJ,KAAK0B,SAAW,SAAWtB,EAAKC,GAE/B,IAAIC,EAAQN,MAEC,IAAIF,MAAM6B,YAChBxB,KAAMC,EAAK,SAAUU,EAAUc,GAErC,IAAIC,EAAmBD,EAAW,GAClCC,EAAiBZ,UAAW,EAE5BnB,MAAMa,YAAYE,KAAMP,EAAOQ,EAAUe,GAEzC,IAAIX,EAAQ,IAAIpB,MAAMqB,eAAgBb,GACtCA,EAAMY,MAAQA,EAGd,IAAM,IAAIE,EAAI,EAAGA,EAAIN,EAASO,WAAWC,SAAWF,EAEnDF,EAAMK,WAAYT,EAASO,WAAYD,SAKxBJ,IAAXX,GAAuBA,OAM9BL,KAAK8B,OAAS,SAAUC,GAEvB/B,KAAKkB,MAAMY,OAAQC,IAIpB/B,KAAKgC,KAAO,SAAUC,EAAUC,GAG/B,OAAOlC,KAAKkB,MAAMK,WAAYU,GAC5BE,mBAAoBD,GAASF,QAGhChC,KAAKoC,UAAY,SAAUC,EAAcC,EAAYC,GAEpDvC,KAAKkB,MAAMsB,gBAEX,IAAIC,EAAazC,KAAKgC,KAAMK,EAAc,GACtCK,EAAW1C,KAAKgC,KAAMM,EAAY,GAEtCG,EAAWE,YAAaD,EAAUH,GAAU,IAI7CvC,KAAK4C,KAAO,SAAUP,EAAcC,EAAYC,GAE/CvC,KAAKkB,MAAMsB,gBAEX,IAAIC,EAAazC,KAAKgC,KAAMK,EAAc,GACtCK,EAAW1C,KAAKgC,KAAMM,EAAY,GAEtCG,EAAWE,YAAaD,EAAUH,GAAU,IAI7CvC,KAAK6C,YAAc,SAAUZ,EAAUC,GAEtClC,KAAKkB,MAAMK,WAAYU,GAAWE,mBAAoBD,IAIvDlC,KAAK8C,UAAY,SAAUb,GAE1B,OAAOjC,KAAKkB,MAAMK,WAAYU,GAAWc,sBAI1C/C,KAAKgD,SAAW,WAEfhD,KAAKkB,MAAM+B,UAAY,GAIxBjD,KAAKkD,WAAa,WAEjBlD,KAAKkB,MAAM+B,UAAY,GAKxBjD,KAAKmD,QAAU,WAEdnD,KAAKkB,MAAMsB,iBAIZxC,KAAKoD,UAAY,SAAUC,GAE1BrD,KAAKsD,QAAUD,IAOjBvD,MAAMC,eAAewD,UAAYC,OAAOC,OAAQ3D,MAAMa,YAAY4C,WAClEzD,MAAMC,eAAewD,UAAUG,YAAc5D,MAAMC,eAEnDD,MAAMC,eAAewD,UAAUI,WAAa,WAE3C,IAAIC,EAAU,IAAI9D,MAAM+D,QAExB,OAAO,WASN,OANAD,EAAQE,KACL9D,KAAK+D,OAAOC,SAAU,IACtBhE,KAAK+D,OAAOC,SAAU,IACtBhE,KAAK+D,OAAOC,SAAU,KAGlBJ","file":"../../threejs/BlendCharacter.js","sourcesContent":["/**\n * @author Michael Guerrero / http://realitymeltdown.com\n */\n\nTHREE.BlendCharacter = function () {\n\n\tthis.weightSchedule = [];\n\tthis.warpSchedule = [];\n\n\tthis.load = function ( url, onLoad ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.ObjectLoader();\n\t\tloader.load( url, function( loadedObject ) {\n\n\t\t\t// The exporter does not currently allow exporting a skinned mesh by itself\n\t\t\t// so we must fish it out of the hierarchy it is embedded in (scene)\n\t\t\tloadedObject.traverse( function( object ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tscope.skinnedMesh = object;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tTHREE.SkinnedMesh.call( scope, scope.skinnedMesh.geometry, scope.skinnedMesh.material );\n\n\t\t\t// If we didn't successfully find the mesh, bail out\n\t\t\tif ( scope.skinnedMesh == undefined ) {\n\n\t\t\t\tconsole.log( 'unable to find skinned mesh in ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.material.skinning = true;\n\n\t\t\tscope.mixer = new THREE.AnimationMixer( scope );\n\t\t\tscope.mixer = scope.mixer;\n\n\t\t\t// Create the animations\n\t\t\tfor ( var i = 0; i < scope.geometry.animations.length; ++ i ) {\n\n\t\t\t\tscope.mixer.clipAction( scope.geometry.animations[ i ] );\n\n\t\t\t}\n\n\t\t\t// Loading is complete, fire the callback\n\t\t\tif ( onLoad !== undefined ) onLoad();\n\n\t\t} );\n\n\t};\n\n\tthis.loadJSON = function ( url, onLoad ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.JSONLoader();\n\t\tloader.load( url, function( geometry, materials ) {\n\n\t\t\tvar originalMaterial = materials[ 0 ];\n\t\t\toriginalMaterial.skinning = true;\n\n\t\t\tTHREE.SkinnedMesh.call( scope, geometry, originalMaterial );\n\n\t\t\tvar mixer = new THREE.AnimationMixer( scope );\n\t\t\tscope.mixer = mixer;\n\n\t\t\t// Create the animations\n\t\t\tfor ( var i = 0; i < geometry.animations.length; ++ i ) {\n\n\t\t\t\tmixer.clipAction( geometry.animations[ i ] );\n\n\t\t\t}\n\n\t\t\t// Loading is complete, fire the callback\n\t\t\tif ( onLoad !== undefined ) onLoad();\n\n\t\t} );\n\n\t};\n\t\n\tthis.update = function( dt ) {\n\n\t\tthis.mixer.update( dt );\n\n\t};\n\n\tthis.play = function( animName, weight ) {\n\n\t\t//console.log(\"play('%s', %f)\", animName, weight);\n\t\treturn this.mixer.clipAction( animName ).\n\t\t\t\tsetEffectiveWeight( weight ).play();\n\t};\n\n\tthis.crossfade = function( fromAnimName, toAnimName, duration ) {\n\n\t\tthis.mixer.stopAllAction();\n\n\t\tvar fromAction = this.play( fromAnimName, 1 );\n\t\tvar toAction = this.play( toAnimName, 1 );\n\n\t\tfromAction.crossFadeTo( toAction, duration, false );\n\n\t};\n\n\tthis.warp = function( fromAnimName, toAnimName, duration ) {\n\n\t\tthis.mixer.stopAllAction();\n\n\t\tvar fromAction = this.play( fromAnimName, 1 );\n\t\tvar toAction = this.play( toAnimName, 1 );\n\n\t\tfromAction.crossFadeTo( toAction, duration, true );\n\n\t};\n\n\tthis.applyWeight = function( animName, weight ) {\n\n\t\tthis.mixer.clipAction( animName ).setEffectiveWeight( weight );\n\n\t};\n\n\tthis.getWeight = function( animName ) {\n\n\t\treturn this.mixer.clipAction( animName ).getEffectiveWeight();\n\n\t}\n\n\tthis.pauseAll = function() {\n\n\t\tthis.mixer.timeScale = 0;\n\n\t};\n\n\tthis.unPauseAll = function() {\n\n\t\tthis.mixer.timeScale = 1;\n\n\t};\n\n\n\tthis.stopAll = function() {\n\n\t\tthis.mixer.stopAllAction();\n\n\t};\n\n\tthis.showModel = function( boolean ) {\n\n\t\tthis.visible = boolean;\n\n\t}\n\n};\n\n\nTHREE.BlendCharacter.prototype = Object.create( THREE.SkinnedMesh.prototype );\nTHREE.BlendCharacter.prototype.constructor = THREE.BlendCharacter;\n\nTHREE.BlendCharacter.prototype.getForward = function() {\n\n\tvar forward = new THREE.Vector3();\n\n\treturn function() {\n\n\t\t// pull the character's forward basis vector out of the matrix\n\t\tforward.set(\n\t\t\t- this.matrix.elements[ 8 ],\n\t\t\t- this.matrix.elements[ 9 ],\n\t\t\t- this.matrix.elements[ 10 ]\n\t\t);\n\n\t\treturn forward;\n\n\t}\n\n};\n\n"]}