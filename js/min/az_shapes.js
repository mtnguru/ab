Drupal.atomizer.shapesC=function(e){function t(e,t){var r=(1+Math.sqrt(5))/2,c=[0,1,r,0,-1,r,0,1,-r,0,-1,-r,r,0,1,r,0,-1,-r,0,-1,-r,0,1,1,r,0,-1,r,0,1,-r,0,-1,-r,0],s=[9,0,8,9,8,2,10,1,11,10,11,3,8,0,4,1,4,0,10,4,1,4,5,8,10,5,4,2,8,5,5,3,2,10,3,5,9,2,6,6,2,3,3,11,6,9,6,7,7,6,11,9,7,0,0,7,1,11,1,7];THREE.PolyhedronGeometry.call(this,c,s,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}function r(e,t,r){var c=[1.3584752137243,1.0361372789803,0,1.5425983561874,-.95086776219312,0,-1.3584752137243,1.0361372789803,0,-1.5425983561874,-.95086776219312,0,.99043524980164,0,-1.6512282239033,-.99043524980164,0,-1.6512282239033,-.99043524980164,0,1.6512282239033,.99043524980164,0,1.6512282239033,0,1.6749956538651,-1.2913717329017,0,1.6749956538651,1.2913717329017,0,-1.605,-1,0,-1.605,1,1.9197063907443,1.7431021759466,1.7651180413022,2.8555615478674,.17282948323074,.99775880481776,2.8555615478674,.17282948323074,-.99775880481776,1.9197063907443,1.7431021759466,-1.7651180413022,-1.9197063907443,1.7431021759466,-1.7651180413022,-2.8555615478674,.17282948323074,-.99775880481776,-2.8555615478674,.17282948323074,.99775880481776,-1.9197063907443,1.7431021759466,1.7651180413022,2.85,1.9,0,-2.85,1.9,0],s=c.length/3;this.vertices=[];for(var a=0;a<s;a++){var o=3*a,n=c[o]*t,i=c[o+1]*t,h=c[o+2]*t;"final"==e&&(0!=a&&2!=a||(n*=.906),8!=a&&9!=a||(h*=1.094)),this.vertices.push(new THREE.Vector3(n,i,h))}this.type="BackboneGeometry",this.parameters={radius:t,detail:r}}function c(e,t){var r=(1+Math.sqrt(5))/2,c=1/r,s=[1,1,1,c,r,0,-c,r,0,-1,1,1,0,c,r,1,1,-1,r,0,c,0,-c,r,-r,0,c,-1,1,-1,1,-1,-1,c,-r,0,-c,-r,0,-1,-1,-1,0,-c,-r,r,0,-c,1,-1,1,-1,-1,1,-r,0,-c,0,c,-r],a=[15,10,14,15,14,19,15,19,5,5,19,9,5,9,2,5,2,1,14,13,18,14,18,9,14,9,19,10,11,12,10,12,13,10,13,14,6,16,11,6,11,10,6,10,15,0,6,15,0,15,5,0,5,1,9,18,8,9,8,3,9,3,2,13,12,17,13,17,8,13,8,18,17,12,11,17,11,16,17,16,7,4,7,16,4,16,6,4,6,0,3,4,0,3,0,1,3,1,2,8,17,7,8,7,4,8,4,3];THREE.PolyhedronGeometry.call(this,s,a,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.azfaces=[{indices:[5,19,14,10,15],faces:[0,1,2]},{indices:[1,2,9,19,5],faces:[3,4,5]},{indices:[9,18,13,14,19],faces:[6,7,8]},{indices:[10,11,12,13,14],faces:[9,10,11]},{indices:[6,15,10,11,16],faces:[12,13,14]},{indices:[0,1,5,15,6],faces:[15,16,17]},{indices:[2,3,8,18,9],faces:[18,19,20]},{indices:[8,17,12,13,18],faces:[21,22,23]},{indices:[7,16,11,12,17],faces:[24,25,26]},{indices:[0,6,16,7,4],faces:[27,28,29]},{indices:[0,1,2,3,4],faces:[30,31,32]},{indices:[3,4,7,17,8],faces:[33,34,35]}]}function s(e,t){var r=[1,1,1,1,-1,1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1],c=[0,1,3,1,2,3,4,5,7,5,6,7,4,7,3,7,0,3,6,5,1,5,2,1,7,6,0,6,1,0,3,2,4,2,5,4];THREE.PolyhedronGeometry.call(this,r,c,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.azfaces=[{indices:[0,1,2,3],faces:[0,1]},{indices:[4,5,6,7],faces:[2,3]},{indices:[0,3,4,7],faces:[4,5]},{indices:[1,6,5,2],faces:[6,7]},{indices:[0,7,6,1],faces:[8,9]},{indices:[2,5,4,3],faces:[10,11]}]}function a(e,t,r){var c=new THREE.Geometry;c.vertices.push(new THREE.Vector3(0,r,0)),c.vertices.push(new THREE.Vector3(0,-r,0));for(var s=2*Math.PI/e,a=0,o=Math.PI;a<e;a++,o+=s){var n=Math.cos(o),i=Math.sin(o);c.vertices.push(new THREE.Vector3(t*n,0,t*i))}for(a=2;a<e+1;a++)c.faces.push(new THREE.Face3(a+1,a,0)),c.faces.push(new THREE.Face3(1,a,a+1));return c.faces.push(new THREE.Face3(2,e+1,0)),c.faces.push(new THREE.Face3(1,e+1,2)),c.computeFaceNormals(),c}(t.prototype=Object.create(THREE.PolyhedronGeometry.prototype)).constructor=t,(r.prototype=Object.create(THREE.PolyhedronGeometry.prototype)).constructor=r,(c.prototype=Object.create(THREE.PolyhedronGeometry.prototype)).constructor=c,(s.prototype=Object.create(THREE.PolyhedronGeometry.prototype)).constructor=s;return{createPyramid:function(e,t,r){var c=r/2,s=new THREE.Geometry;s.vertices.push(new THREE.Vector3(0,c,0));for(var a=2*Math.PI/e,o=0,n=Math.PI;o<e;o++,n+=a){var i=Math.cos(n),h=Math.sin(n);s.vertices.push(new THREE.Vector3(t*i,-c,t*h))}for(o=1;o<e;o++)s.faces.push(new THREE.Face3(o+1,o,0));s.faces.push(new THREE.Face3(1,e,0));for(o=2;o<e;o++)s.faces.push(new THREE.Face3(o,o+1,1));return s.computeFaceNormals(),s},createBiPyramid:a,getGeometry:function(e,o,n,i,h){switch(e){case"icosahedron":return new t(n,h);case"dodecahedron":return new c(n,h);case"decahedron":return a(5,n,i);case"hexahedron":return new s(n,h);case"backbone":return new r(o,n,h)}}}};
//# sourceMappingURL=maps/az_shapes.js.map
