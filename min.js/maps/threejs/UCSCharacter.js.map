{"version":3,"sources":["threejs/UCSCharacter.js"],"names":["THREE","UCSCharacter","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","scope","checkLoadComplete","mapping","UVMapping","name","createMaterials","skins","materials","MeshLambertMaterial","color","specular","map","skinning","morphTargets","mesh","this","scale","root","Object3D","numSkins","numMorphs","morphs","mixer","AnimationMixer","onLoadComplete","loadCounter","loadParts","config","loader","JSONLoader","console","log","character","geometry","computeBoundingBox","computeVertexNormals","SkinnedMesh","MultiMaterial","add","bb","boundingBox","set","s","position","x","y","min","z","castShadow","receiveShadow","clipAction","animations","play","setSkin","index","material","updateMorphs","influences","morphTargetInfluences"],"mappings":"AAAAA,MAAMC,aAAe,WA2FpB,SAASC,EAAcC,EAASC,GAK/B,IAAM,IAHFC,EAAgB,IAAIL,MAAMM,cAC1BC,KAEMC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IAExCD,EAAUC,GAAMH,EAAcK,KAAMP,EAAUC,EAAaI,GAAKG,EAAMC,mBACtEL,EAAUC,GAAIK,QAAUb,MAAMc,UAC9BP,EAAUC,GAAIO,KAAOX,EAAaI,GAInC,OAAOD,EAIR,SAASS,EAAiBC,GAIzB,IAAM,IAFFC,KAEMV,EAAI,EAAGA,EAAIS,EAAMR,OAAQD,IAElCU,EAAWV,GAAM,IAAIR,MAAMmB,qBAC1BC,MAAO,SACPC,SAAU,GACVC,IAAKL,EAAOT,GACZe,UAAU,EACVC,cAAc,IAKhB,OAAON,EA1HR,IAEIO,EAFAd,EAAQe,KAIZA,KAAKC,MAAQ,EAEbD,KAAKE,KAAO,IAAI5B,MAAM6B,SAEtBH,KAAKI,SACLJ,KAAKK,UAELL,KAAKT,SACLS,KAAKR,aACLQ,KAAKM,UAELN,KAAKO,MAAQ,IAAIjC,MAAMkC,eAAgBR,KAAKE,MAE5CF,KAAKS,eAAiB,aAEtBT,KAAKU,YAAc,EAEnBV,KAAKW,UAAY,SAAWC,GAE3BZ,KAAKI,SAAWQ,EAAOrB,MAAMR,OAC7BiB,KAAKK,UAAYO,EAAON,OAAOvB,OAG/BiB,KAAKU,YAAc,EAAIE,EAAOrB,MAAMR,OAGpCiB,KAAKT,MAAQf,EAAcoC,EAAOnC,QAAU,SAAUmC,EAAOrB,OAC7DS,KAAKR,UAAYF,EAAiBU,KAAKT,OAGvCS,KAAKM,OAASM,EAAON,OAGrB,IAAIO,EAAS,IAAIvC,MAAMwC,WACvBC,QAAQC,IAAKJ,EAAOnC,QAAUmC,EAAOK,WACrCJ,EAAO7B,KAAM4B,EAAOnC,QAAUmC,EAAOK,UAAW,SAAUC,GAEzDA,EAASC,qBACTD,EAASE,wBAETrB,EAAO,IAAIzB,MAAM+C,YAAaH,EAAU,IAAI5C,MAAMgD,gBAC7CjC,KAAOuB,EAAOK,UACnBhC,EAAMiB,KAAKqB,IAAKxB,GAEhB,IAAIyB,EAAKN,EAASO,YAClBxC,EAAMiB,KAAKD,MAAMyB,IAAKd,EAAOe,EAAGf,EAAOe,EAAGf,EAAOe,GACjD1C,EAAMiB,KAAK0B,SAASF,IAAKd,EAAOiB,EAAGjB,EAAOkB,EAAIN,EAAGO,IAAID,EAAIlB,EAAOe,EAAGf,EAAOoB,GAE1EjC,EAAKkC,YAAa,EAClBlC,EAAKmC,eAAgB,EAErBjD,EAAMsB,MAAM4B,WAAYjB,EAASkB,WAAW,GAAIrC,GAAOsC,OAEvDpD,EAAMqD,QAAS,GAEfrD,EAAMC,uBAMRc,KAAKsC,QAAU,SAAUC,GAEnBxC,GAAQd,EAAMO,YAElBO,EAAKyC,SAAWvD,EAAMO,UAAW+C,KAMnCvC,KAAKyC,aAAe,SAAUC,GAE7B,GAAK3C,EAEJ,IAAM,IAAIjB,EAAI,EAAGA,EAAIG,EAAMoB,UAAWvB,IAErCiB,EAAK4C,sBAAuB7D,GAAM4D,EAAYzD,EAAMqB,OAAQxB,IAAQ,KA6CvEkB,KAAKd,kBAAoB,WAExBD,EAAMyB,aAAe,EAEM,IAAtBzB,EAAMyB,aAEVzB,EAAMwB","file":"../../threejs/UCSCharacter.js","sourcesContent":["THREE.UCSCharacter = function() {\n\n\tvar scope = this;\n\n\tvar mesh;\n\n\tthis.scale = 1;\n\n\tthis.root = new THREE.Object3D();\n\n\tthis.numSkins;\n\tthis.numMorphs;\n\n\tthis.skins = [];\n\tthis.materials = [];\n\tthis.morphs = [];\n\n\tthis.mixer = new THREE.AnimationMixer( this.root );\n\n\tthis.onLoadComplete = function () {};\n\n\tthis.loadCounter = 0;\n\n\tthis.loadParts = function ( config ) {\n\n\t\tthis.numSkins = config.skins.length;\n\t\tthis.numMorphs = config.morphs.length;\n\n\t\t// Character geometry + number of skins\n\t\tthis.loadCounter = 1 + config.skins.length;\n\n\t\t// SKINS\n\t\tthis.skins = loadTextures( config.baseUrl + \"skins/\", config.skins );\n\t\tthis.materials = createMaterials( this.skins );\n\n\t\t// MORPHS\n\t\tthis.morphs = config.morphs;\n\n\t\t// CHARACTER\n\t\tvar loader = new THREE.JSONLoader();\n\t\tconsole.log( config.baseUrl + config.character );\n\t\tloader.load( config.baseUrl + config.character, function( geometry ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\t\t\tgeometry.computeVertexNormals();\n\n\t\t\tmesh = new THREE.SkinnedMesh( geometry, new THREE.MultiMaterial() );\n\t\t\tmesh.name = config.character;\n\t\t\tscope.root.add( mesh );\n\n\t\t\tvar bb = geometry.boundingBox;\n\t\t\tscope.root.scale.set( config.s, config.s, config.s );\n\t\t\tscope.root.position.set( config.x, config.y - bb.min.y * config.s, config.z );\n\n\t\t\tmesh.castShadow = true;\n\t\t\tmesh.receiveShadow = true;\n\n\t\t\tscope.mixer.clipAction( geometry.animations[0], mesh ).play();\n\n\t\t\tscope.setSkin( 0 );\n\n\t\t\tscope.checkLoadComplete();\n\n\t\t} );\n\n\t};\n\n\tthis.setSkin = function( index ) {\n\n\t\tif ( mesh && scope.materials ) {\n\n\t\t\tmesh.material = scope.materials[ index ];\n\n\t\t}\n\n\t};\n\n\tthis.updateMorphs = function( influences ) {\n\n\t\tif ( mesh ) {\n\n\t\t\tfor ( var i = 0; i < scope.numMorphs; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = influences[ scope.morphs[ i ] ] / 100;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction loadTextures( baseUrl, textureUrls ) {\n\n\t\tvar textureLoader = new THREE.TextureLoader();\n\t\tvar textures = [];\n\n\t\tfor ( var i = 0; i < textureUrls.length; i ++ ) {\n\n\t\t\ttextures[ i ] = textureLoader.load( baseUrl + textureUrls[ i ], scope.checkLoadComplete );\n\t\t\ttextures[ i ].mapping = THREE.UVMapping;\n\t\t\ttextures[ i ].name = textureUrls[ i ];\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tfunction createMaterials( skins ) {\n\n\t\tvar materials = [];\n\n\t\tfor ( var i = 0; i < skins.length; i ++ ) {\n\n\t\t\tmaterials[ i ] = new THREE.MeshLambertMaterial( {\n\t\t\t\tcolor: 0xeeeeee,\n\t\t\t\tspecular: 10.0,\n\t\t\t\tmap: skins[ i ],\n\t\t\t\tskinning: true,\n\t\t\t\tmorphTargets: true\n\t\t\t} );\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tthis.checkLoadComplete = function () {\n\n\t\tscope.loadCounter -= 1;\n\n\t\tif ( scope.loadCounter === 0 ) {\n\n\t\t\tscope.onLoadComplete();\n\n\t\t}\n\n\t}\n\n};\n"]}