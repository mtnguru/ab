{"version":3,"sources":["az_base.js"],"names":["$","Array","prototype","contains","needle","i","this","Drupal","atomizer","baseC","AjaxCommands","loadYmlCommand","ajax","response","status","component","loadYml","saveYmlCommand","saveYml","renderNodeCommand","renderNode","doAjax","url","data","successCallback","errorCallback","type","JSON","stringify","contentType","processData","success","isArray","length","message","alert","error","responseText","alignObjectToAxis","object","objectAxis","finalAxis","negate","rotationAxis","THREE","Vector3","crossVectors","normalize","radians","Math","acos","dot","quaternion","setFromAxisAngle","initDraggable","$elem","name","initLeft","initTop","constants","visibleThresh","transparentThresh","jQuery"],"mappings":"CAMA,SAAWA,GAETC,MAAMC,UAAUC,SAAW,SAAWC,GACpC,IAAK,IAAIC,KAAKC,KACZ,GAAIA,KAAKD,IAAMD,EAAQ,OAAO,EAEhC,OAAO,GAGTG,OAAOC,YAEPD,OAAOC,SAASC,MAAQ,WAEtBF,OAAOG,aAAaR,UAAUS,eAAiB,SAASC,EAAMC,EAAUC,GACtEP,OAAOC,SAASK,EAASE,WAAWC,QAAQH,IAG9CN,OAAOG,aAAaR,UAAUe,eAAiB,SAASL,EAAMC,EAAUC,GACtEP,OAAOC,SAASK,EAASE,WAAWG,QAAQL,IAG9CN,OAAOG,aAAaR,UAAUiB,kBAAoB,SAASP,EAAMC,EAAUC,GACzEP,OAAOC,SAASK,EAASE,WAAWK,WAAWP,IAgJjD,OACEQ,OA9IW,SAAiBC,EAAKC,EAAMC,EAAiBC,GACxDzB,EAAEY,MACAU,IAAKA,EACLI,KAAM,OACNH,KAAMI,KAAKC,UAAUL,GACrBM,YAAa,kCACbC,aAAa,EACbC,QAAS,SAAUlB,GASjB,OARIZ,MAAM+B,QAAQnB,IAAaA,EAASoB,OAAS,GAC3CpB,EAAS,GAAGU,MAAQV,EAAS,GAAGU,KAAKW,SACvCC,MAAMtB,EAAS,GAAGU,KAAKW,SAErBV,GAAiBA,EAAgBX,IAErC,EAAkBY,EAAcZ,GAAYW,EAAgBX,IAEvD,GAETuB,MAAO,SAAUvB,GACfsB,MAAM,yBAA2BtB,EAASwB,cAC1C,EAAkBZ,EAAcZ,GAAYW,EAAgBX,OA2HhEyB,kBA9GF,SAA2BC,EAAQC,EAAYC,EAAWC,GAExD,IAAIC,EAAe,IAAIC,MAAMC,QAC7BF,EAAaG,aAAcN,EAAYC,GAAYM,YAGnDC,QAAUC,KAAKC,KAAKV,EAAWW,IAAIV,IAGnCF,EAAOa,WAAWC,iBAAiBV,EAAc,GAAYK,QAAUA,UAsGvEM,cA7CF,SAAuBC,EAAMC,EAAKC,EAASC,KA8CzCC,WACEC,cAAe,IACfC,kBAAmB,OA5K3B,CAkLGC","file":"../az_base.js","sourcesContent":["/**\n * @file - az_base.js\n *\n * File that generates nuclets  proton, helium, lithium, helium - 1, 4, 7, 11\n */\n\n(function ($) {\n\n  Array.prototype.contains = function ( needle ) {\n    for (var i in this) {\n      if (this[i] == needle) return true;\n    }\n    return false;\n  };\n\n  Drupal.atomizer = {};\n\n  Drupal.atomizer.baseC = function () {\n\n    Drupal.AjaxCommands.prototype.loadYmlCommand = function(ajax, response, status) {\n      Drupal.atomizer[response.component].loadYml(response);\n    };\n\n    Drupal.AjaxCommands.prototype.saveYmlCommand = function(ajax, response, status) {\n      Drupal.atomizer[response.component].saveYml(response);\n    };\n\n    Drupal.AjaxCommands.prototype.renderNodeCommand = function(ajax, response, status) {\n      Drupal.atomizer[response.component].renderNode(response);\n    };\n\n    var doAjax = function doAjax (url, data, successCallback, errorCallback) {\n      $.ajax({\n        url: url,\n        type: 'POST',\n        data: JSON.stringify(data),\n        contentType: \"application/json; charset=utf-8\",\n        processData: false,\n        success: function (response) {\n          if (Array.isArray(response) && response.length > 0) {\n            if (response[0].data && response[0].data.message) {\n              alert(response[0].data.message);\n            }\n            if (successCallback) successCallback(response);\n          } else {\n            (errorCallback) ? errorCallback(response) : successCallback(response);\n          }\n          return false;\n        },\n        error: function (response) {\n          alert('atomizer_base doAjax: ' + response.responseText);\n          (errorCallback) ? errorCallback(response) : successCallback(response);\n        }\n      });\n    }\n\n    /**\n     * Align the axis of an object to another axis.\n     *\n     * @param object\n     * @param objectAxis\n     * @param finalAxis\n     * @param negate\n     */\n    function alignObjectToAxis(object, objectAxis, finalAxis, negate) {\n      // Find the rotation axis.\n      var rotationAxis = new THREE.Vector3();\n      rotationAxis.crossVectors( objectAxis, finalAxis ).normalize();\n\n      // calculate the angle between the element axis vector and rotation vector\n      radians = Math.acos(objectAxis.dot(finalAxis) );\n\n      // set the quaternion\n      object.quaternion.setFromAxisAngle(rotationAxis, (negate) ? -radians : radians);\n    }\n\n    /*\n    var mouseX,mouseY,windowWidth,windowHeight;\n    var  popupLeft,popupTop;\n\n      $(document).mousemove(function(e){\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n        //To Get the relative position\n        if( this.offsetLeft !=undefined)\n          mouseX = e.pageX - this.offsetLeft;\n        if( this.offsetTop != undefined)\n          mouseY = e.pageY; - this.offsetTop;\n\n        if(mouseX < 0)\n          mouseX =0;\n        if(mouseY < 0)\n          mouseY = 0;\n\n        windowWidth  = $(window).width()+$(window).scrollLeft();\n        windowHeight = $(window).height()+$(window).scrollTop();\n      });\n\n      $('html').click(function(){\n        $('div').show();\n        var popupWidth  = $('div').outerWidth();\n        var popupHeight =  $('div').outerHeight();\n\n        if(mouseX+popupWidth > windowWidth)\n          popupLeft = mouseX-popupWidth;\n        else\n          popupLeft = mouseX;\n\n        if(mouseY+popupHeight > windowHeight)\n          popupTop = mouseY-popupHeight;\n        else\n          popupTop = mouseY;\n\n        if( popupLeft < $(window).scrollLeft()){\n          popupLeft = $(window).scrollLeft();\n        }\n\n        if( popupTop < $(window).scrollTop()){\n          popupTop = $(window).scrollTop();\n        }\n\n        if(popupLeft < 0 || popupLeft == undefined)\n          popupLeft = 0;\n        if(popupTop < 0 || popupTop == undefined)\n          popupTop = 0;\n\n        $('div').offset({top:popupTop,left:popupLeft});\n      });\n    */\n\n    function initDraggable($elem,name,initLeft,initTop) {\n      /*\n      var left;\n      var top;\n      var ww = window.innerWidth;\n      var wh = window.innerHeight;\n      var dw = ($elem.outerWidth() < 40) ? 200 : $elem.outerWidth();\n      var dh = ($elem.outerHeight() < 40) ? 100 : $elem.outerHeight();\n      if (localStorage[name]) {\n        var pt = localStorage[name].split(\",\");\n        left = parseInt(pt[0]);\n        top  = parseInt(pt[1]);\n        if (left + dw > ww) {\n          left = ww - dw;\n        }\n        if (top + dh > wh) {\n          top = wh - dh;\n        }\n      } else {\n        left = initLeft;\n        top  = initTop;\n        if (initLeft < 0) {\n          left = ww - dw + initLeft;\n        }\n        if (initTop < 0) {\n          top = wh - dh + initTop;\n        }\n      }\n      $.elem.css({'left': left,\n        'top':  top});\n      $.elem.draggable({\n        stop: function(evt,ui) {\n          var left = $(this).css('left');\n          var top = $(this).css('top');\n          if (parseInt(top) < 0)  top  = \"0px\";\n          if (parseInt(left) < 0) left = \"0px\";\n          localStorage[name] = left + ',' + top;\n        }\n      });\n      */\n    }\n\n    return {\n      doAjax: doAjax,\n      alignObjectToAxis: alignObjectToAxis,\n      initDraggable: initDraggable,\n      constants: {\n        visibleThresh: .03,\n        transparentThresh: .97\n      }\n    };\n\n  };\n\n})(jQuery);\n"]}