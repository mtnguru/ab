{"version":3,"sources":["threejs/Car.js"],"names":["THREE","Car","createBody","geometry","materials","scope","bodyGeometry","bodyMaterials","createCar","createWheels","wheelGeometry","wheelMaterials","autoWheelGeometry","computeBoundingBox","bb","boundingBox","wheelOffset","addVectors","min","max","multiplyScalar","wheelDiameter","y","center","s","modelScale","delta","Vector3","bodyFaceMaterial","MultiMaterial","wheelFaceMaterial","bodyMesh","Mesh","scale","set","root","add","multiplyVectors","frontLeftWheelRoot","position","frontLeftWheelMesh","frontRightWheelRoot","frontRightWheelMesh","rotation","z","Math","PI","backWheelOffset","backLeftWheelMesh","backRightWheelMesh","meshes","loaded","callback","exponentialEaseOut","k","pow","this","MAX_SPEED","MAX_REVERSE_SPEED","MAX_WHEEL_ROTATION","FRONT_ACCELERATION","BACK_ACCELERATION","WHEEL_ANGULAR_ACCELERATION","FRONT_DECCELERATION","WHEEL_ANGULAR_DECCELERATION","STEERING_RADIUS_RATIO","MAX_TILT_SIDES","MAX_TILT_FRONTBACK","speed","acceleration","wheelOrientation","carOrientation","Object3D","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","loadPartsJSON","bodyURL","wheelURL","loader","JSONLoader","load","loadPartsBinary","BinaryLoader","updateCarModel","controls","moveForward","clamp","moveBackward","moveLeft","moveRight","forwardDelta","x","sin","cos","wheelDelta"],"mappings":"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","file":"../../threejs/Car.js","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Car = function () {\n\n\tvar scope = this;\n\n\t// car geometry manual parameters\n\n\tthis.modelScale = 1;\n\n\tthis.backWheelOffset = 2;\n\n\tthis.autoWheelGeometry = true;\n\n\t// car geometry parameters automatically set from wheel mesh\n\t// \t- assumes wheel mesh is front left wheel in proper global\n\t//    position with respect to body mesh\n\t//\t- other wheels are mirrored against car root\n\t//\t- if necessary back wheels can be offset manually\n\n\tthis.wheelOffset = new THREE.Vector3();\n\n\tthis.wheelDiameter = 1;\n\n\t// car \"feel\" parameters\n\n\tthis.MAX_SPEED = 2200;\n\tthis.MAX_REVERSE_SPEED = - 1500;\n\n\tthis.MAX_WHEEL_ROTATION = 0.6;\n\n\tthis.FRONT_ACCELERATION = 1250;\n\tthis.BACK_ACCELERATION = 1500;\n\n\tthis.WHEEL_ANGULAR_ACCELERATION = 1.5;\n\n\tthis.FRONT_DECCELERATION = 750;\n\tthis.WHEEL_ANGULAR_DECCELERATION = 1.0;\n\n\tthis.STEERING_RADIUS_RATIO = 0.0023;\n\n\tthis.MAX_TILT_SIDES = 0.05;\n\tthis.MAX_TILT_FRONTBACK = 0.015;\n\n\t// internal control variables\n\n\tthis.speed = 0;\n\tthis.acceleration = 0;\n\n\tthis.wheelOrientation = 0;\n\tthis.carOrientation = 0;\n\n\t// car rigging\n\n\tthis.root = new THREE.Object3D();\n\n\tthis.frontLeftWheelRoot = new THREE.Object3D();\n\tthis.frontRightWheelRoot = new THREE.Object3D();\n\n\tthis.bodyMesh = null;\n\n\tthis.frontLeftWheelMesh = null;\n\tthis.frontRightWheelMesh = null;\n\n\tthis.backLeftWheelMesh = null;\n\tthis.backRightWheelMesh = null;\n\n\tthis.bodyGeometry = null;\n\tthis.wheelGeometry = null;\n\n\tthis.bodyMaterials = null;\n\tthis.wheelMaterials = null;\n\n\t// internal helper variables\n\n\tthis.loaded = false;\n\n\tthis.meshes = [];\n\n\t// API\n\n\tthis.enableShadows = function ( enable ) {\n\n\t\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].castShadow = enable;\n\t\t\tthis.meshes[ i ].receiveShadow = enable;\n\n\t\t}\n\n\t};\n\n\tthis.setVisible = function ( enable ) {\n\n\t\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].visible = enable;\n\t\t\tthis.meshes[ i ].visible = enable;\n\n\t\t}\n\n\t};\n\n\tthis.loadPartsJSON = function ( bodyURL, wheelURL ) {\n\n\t\tvar loader = new THREE.JSONLoader();\n\n\t\tloader.load( bodyURL, function( geometry, materials ) {\n\n\t\t\tcreateBody( geometry, materials )\n\n\t\t} );\n\t\tloader.load( wheelURL, function( geometry, materials ) {\n\n\t\t\tcreateWheels( geometry, materials )\n\n\t\t} );\n\n\t};\n\n\tthis.loadPartsBinary = function ( bodyURL, wheelURL ) {\n\n\t\tvar loader = new THREE.BinaryLoader();\n\n\t\tloader.load( bodyURL, function( geometry, materials ) {\n\n\t\t\tcreateBody( geometry, materials )\n\n\t\t} );\n\t\tloader.load( wheelURL, function( geometry, materials ) {\n\n\t\t\tcreateWheels( geometry, materials )\n\n\t\t} );\n\n\t};\n\n\tthis.updateCarModel = function ( delta, controls ) {\n\n\t\t// speed and wheels based on controls\n\n\t\tif ( controls.moveForward ) {\n\n\t\t\tthis.speed = THREE.Math.clamp( this.speed + delta * this.FRONT_ACCELERATION, this.MAX_REVERSE_SPEED, this.MAX_SPEED );\n\t\t\tthis.acceleration = THREE.Math.clamp( this.acceleration + delta, - 1, 1 );\n\n\t\t}\n\n\t\tif ( controls.moveBackward ) {\n\n\n\t\t\tthis.speed = THREE.Math.clamp( this.speed - delta * this.BACK_ACCELERATION, this.MAX_REVERSE_SPEED, this.MAX_SPEED );\n\t\t\tthis.acceleration = THREE.Math.clamp( this.acceleration - delta, - 1, 1 );\n\n\t\t}\n\n\t\tif ( controls.moveLeft ) {\n\n\t\t\tthis.wheelOrientation = THREE.Math.clamp( this.wheelOrientation + delta * this.WHEEL_ANGULAR_ACCELERATION, - this.MAX_WHEEL_ROTATION, this.MAX_WHEEL_ROTATION );\n\n\t\t}\n\n\t\tif ( controls.moveRight ) {\n\n\t\t\tthis.wheelOrientation = THREE.Math.clamp( this.wheelOrientation - delta * this.WHEEL_ANGULAR_ACCELERATION, - this.MAX_WHEEL_ROTATION, this.MAX_WHEEL_ROTATION );\n\n\t\t}\n\n\t\t// speed decay\n\n\t\tif ( ! ( controls.moveForward || controls.moveBackward ) ) {\n\n\t\t\tif ( this.speed > 0 ) {\n\n\t\t\t\tvar k = exponentialEaseOut( this.speed / this.MAX_SPEED );\n\n\t\t\t\tthis.speed = THREE.Math.clamp( this.speed - k * delta * this.FRONT_DECCELERATION, 0, this.MAX_SPEED );\n\t\t\t\tthis.acceleration = THREE.Math.clamp( this.acceleration - k * delta, 0, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tvar k = exponentialEaseOut( this.speed / this.MAX_REVERSE_SPEED );\n\n\t\t\t\tthis.speed = THREE.Math.clamp( this.speed + k * delta * this.BACK_ACCELERATION, this.MAX_REVERSE_SPEED, 0 );\n\t\t\t\tthis.acceleration = THREE.Math.clamp( this.acceleration + k * delta, - 1, 0 );\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t// steering decay\n\n\t\tif ( ! ( controls.moveLeft || controls.moveRight ) ) {\n\n\t\t\tif ( this.wheelOrientation > 0 ) {\n\n\t\t\t\tthis.wheelOrientation = THREE.Math.clamp( this.wheelOrientation - delta * this.WHEEL_ANGULAR_DECCELERATION, 0, this.MAX_WHEEL_ROTATION );\n\n\t\t\t} else {\n\n\t\t\t\tthis.wheelOrientation = THREE.Math.clamp( this.wheelOrientation + delta * this.WHEEL_ANGULAR_DECCELERATION, - this.MAX_WHEEL_ROTATION, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// car update\n\n\t\tvar forwardDelta = this.speed * delta;\n\n\t\tthis.carOrientation += ( forwardDelta * this.STEERING_RADIUS_RATIO ) * this.wheelOrientation;\n\n\t\t// displacement\n\n\t\tthis.root.position.x += Math.sin( this.carOrientation ) * forwardDelta;\n\t\tthis.root.position.z += Math.cos( this.carOrientation ) * forwardDelta;\n\n\t\t// steering\n\n\t\tthis.root.rotation.y = this.carOrientation;\n\n\t\t// tilt\n\n\t\tif ( this.loaded ) {\n\n\t\t\tthis.bodyMesh.rotation.z = this.MAX_TILT_SIDES * this.wheelOrientation * ( this.speed / this.MAX_SPEED );\n\t\t\tthis.bodyMesh.rotation.x = - this.MAX_TILT_FRONTBACK * this.acceleration;\n\n\t\t}\n\n\t\t// wheels rolling\n\n\t\tvar angularSpeedRatio = 1 / ( this.modelScale * ( this.wheelDiameter / 2 ) );\n\n\t\tvar wheelDelta = forwardDelta * angularSpeedRatio;\n\n\t\tif ( this.loaded ) {\n\n\t\t\tthis.frontLeftWheelMesh.rotation.x += wheelDelta;\n\t\t\tthis.frontRightWheelMesh.rotation.x += wheelDelta;\n\t\t\tthis.backLeftWheelMesh.rotation.x += wheelDelta;\n\t\t\tthis.backRightWheelMesh.rotation.x += wheelDelta;\n\n\t\t}\n\n\t\t// front wheels steering\n\n\t\tthis.frontLeftWheelRoot.rotation.y = this.wheelOrientation;\n\t\tthis.frontRightWheelRoot.rotation.y = this.wheelOrientation;\n\n\t};\n\n\t// internal helper methods\n\n\tfunction createBody ( geometry, materials ) {\n\n\t\tscope.bodyGeometry = geometry;\n\t\tscope.bodyMaterials = materials;\n\n\t\tcreateCar();\n\n\t}\n\n\tfunction createWheels ( geometry, materials ) {\n\n\t\tscope.wheelGeometry = geometry;\n\t\tscope.wheelMaterials = materials;\n\n\t\tcreateCar();\n\n\t}\n\n\tfunction createCar () {\n\n\t\tif ( scope.bodyGeometry && scope.wheelGeometry ) {\n\n\t\t\t// compute wheel geometry parameters\n\n\t\t\tif ( scope.autoWheelGeometry ) {\n\n\t\t\t\tscope.wheelGeometry.computeBoundingBox();\n\n\t\t\t\tvar bb = scope.wheelGeometry.boundingBox;\n\n\t\t\t\tscope.wheelOffset.addVectors( bb.min, bb.max );\n\t\t\t\tscope.wheelOffset.multiplyScalar( 0.5 );\n\n\t\t\t\tscope.wheelDiameter = bb.max.y - bb.min.y;\n\n\t\t\t\tscope.wheelGeometry.center();\n\n\t\t\t}\n\n\t\t\t// rig the car\n\n\t\t\tvar s = scope.modelScale,\n\t\t\t\tdelta = new THREE.Vector3();\n\n\t\t\tvar bodyFaceMaterial = new THREE.MultiMaterial( scope.bodyMaterials );\n\t\t\tvar wheelFaceMaterial = new THREE.MultiMaterial( scope.wheelMaterials );\n\n\t\t\t// body\n\n\t\t\tscope.bodyMesh = new THREE.Mesh( scope.bodyGeometry, bodyFaceMaterial );\n\t\t\tscope.bodyMesh.scale.set( s, s, s );\n\n\t\t\tscope.root.add( scope.bodyMesh );\n\n\t\t\t// front left wheel\n\n\t\t\tdelta.multiplyVectors( scope.wheelOffset, new THREE.Vector3( s, s, s ) );\n\n\t\t\tscope.frontLeftWheelRoot.position.add( delta );\n\n\t\t\tscope.frontLeftWheelMesh = new THREE.Mesh( scope.wheelGeometry, wheelFaceMaterial );\n\t\t\tscope.frontLeftWheelMesh.scale.set( s, s, s );\n\n\t\t\tscope.frontLeftWheelRoot.add( scope.frontLeftWheelMesh );\n\t\t\tscope.root.add( scope.frontLeftWheelRoot );\n\n\t\t\t// front right wheel\n\n\t\t\tdelta.multiplyVectors( scope.wheelOffset, new THREE.Vector3( - s, s, s ) );\n\n\t\t\tscope.frontRightWheelRoot.position.add( delta );\n\n\t\t\tscope.frontRightWheelMesh = new THREE.Mesh( scope.wheelGeometry, wheelFaceMaterial );\n\n\t\t\tscope.frontRightWheelMesh.scale.set( s, s, s );\n\t\t\tscope.frontRightWheelMesh.rotation.z = Math.PI;\n\n\t\t\tscope.frontRightWheelRoot.add( scope.frontRightWheelMesh );\n\t\t\tscope.root.add( scope.frontRightWheelRoot );\n\n\t\t\t// back left wheel\n\n\t\t\tdelta.multiplyVectors( scope.wheelOffset, new THREE.Vector3( s, s, - s ) );\n\t\t\tdelta.z -= scope.backWheelOffset;\n\n\t\t\tscope.backLeftWheelMesh = new THREE.Mesh( scope.wheelGeometry, wheelFaceMaterial );\n\n\t\t\tscope.backLeftWheelMesh.position.add( delta );\n\t\t\tscope.backLeftWheelMesh.scale.set( s, s, s );\n\n\t\t\tscope.root.add( scope.backLeftWheelMesh );\n\n\t\t\t// back right wheel\n\n\t\t\tdelta.multiplyVectors( scope.wheelOffset, new THREE.Vector3( - s, s, - s ) );\n\t\t\tdelta.z -= scope.backWheelOffset;\n\n\t\t\tscope.backRightWheelMesh = new THREE.Mesh( scope.wheelGeometry, wheelFaceMaterial );\n\n\t\t\tscope.backRightWheelMesh.position.add( delta );\n\t\t\tscope.backRightWheelMesh.scale.set( s, s, s );\n\t\t\tscope.backRightWheelMesh.rotation.z = Math.PI;\n\n\t\t\tscope.root.add( scope.backRightWheelMesh );\n\n\t\t\t// cache meshes\n\n\t\t\tscope.meshes = [ scope.bodyMesh, scope.frontLeftWheelMesh, scope.frontRightWheelMesh, scope.backLeftWheelMesh, scope.backRightWheelMesh ];\n\n\t\t\t// callback\n\n\t\t\tscope.loaded = true;\n\n\t\t\tif ( scope.callback ) {\n\n\t\t\t\tscope.callback( scope );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction quadraticEaseOut( k ) {\n\n\t\treturn - k * ( k - 2 );\n\n\t}\n\tfunction cubicEaseOut( k ) {\n\n\t\treturn -- k * k * k + 1;\n\n\t}\n\tfunction circularEaseOut( k ) {\n\n\t\treturn Math.sqrt( 1 - -- k * k );\n\n\t}\n\tfunction sinusoidalEaseOut( k ) {\n\n\t\treturn Math.sin( k * Math.PI / 2 );\n\n\t}\n\tfunction exponentialEaseOut( k ) {\n\n\t\treturn k === 1 ? 1 : - Math.pow( 2, - 10 * k ) + 1;\n\n\t}\n\n};\n"]}