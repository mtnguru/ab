{"version":3,"sources":["threejs/ShaderToon.js"],"names":["THREE","ShaderToon","toon1","uniforms","uDirLightPos","value","Vector3","uDirLightColor","Color","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","toon2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","hatching","dotted"],"mappings":"AAYAA,MAAMC,YAELC,OAECC,UAECC,cAAkBC,MAAO,IAAIL,MAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,MAAMQ,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIL,MAAMQ,MAAO,SAEhDE,YAAgBL,MAAO,IAAIL,MAAMQ,MAAO,YAIzCG,cAEC,wBACA,yBAEA,gBAEC,4DACA,6DACA,gHAEA,gDAEA,+CACA,2DAEA,+CAED,KAECC,KAAM,MAERC,gBAEC,2BAEA,6BACA,+BAEA,mCAEA,wBAEA,yBAEA,gBAEC,0FACA,yFAEA,mFACA,6CAEA,iEACA,4DACA,qCAEA,4BAEC,4DAED,WAEC,sFAED,IAED,KAECD,KAAM,OAITE,OAECX,UAECC,cAAkBC,MAAO,IAAIL,MAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,MAAMQ,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIL,MAAMQ,MAAO,SAEhDE,YAAgBL,MAAO,IAAIL,MAAMQ,MAAO,WACxCO,aAAiBV,MAAO,IAAIL,MAAMQ,MAAO,UACzCQ,aAAiBX,MAAO,IAAIL,MAAMQ,MAAO,IACzCS,aAAiBZ,MAAO,IAAIL,MAAMQ,MAAO,IACzCU,aAAiBb,MAAO,IAAIL,MAAMQ,MAAO,KAI1CG,cAEC,wBAEA,gBAEC,4EACA,gDAED,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEC,gFACA,sEAEA,0CAEA,sEAEC,4CAED,IAEA,uEAEC,4CAED,IAED,KAECD,KAAM,OAITO,UAEChB,UAECC,cAAkBC,MAAO,IAAIL,MAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,MAAMQ,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIL,MAAMQ,MAAO,SAEhDE,YAAiBL,MAAO,IAAIL,MAAMQ,MAAO,WACzCO,aAAiBV,MAAO,IAAIL,MAAMQ,MAAO,IACzCQ,aAAiBX,MAAO,IAAIL,MAAMQ,MAAO,IACzCS,aAAiBZ,MAAO,IAAIL,MAAMQ,MAAO,IACzCU,aAAiBb,MAAO,IAAIL,MAAMQ,MAAO,KAI1CG,cAEC,wBAEA,gBAEC,4EACA,gDAED,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEC,wFACA,yFAEA,0CAEA,yCAEC,4DAEC,2CAED,IAED,IAEA,yCAEC,2DAEC,2CAED,IACD,IAEA,yCAEC,iEAEC,2CAED,IACD,IAEA,2CAEC,iEAEC,2CAED,IACD,IAED,KAECD,KAAM,OAITQ,QAECjB,UAECC,cAAkBC,MAAO,IAAIL,MAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,MAAMQ,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIL,MAAMQ,MAAO,SAEhDE,YAAiBL,MAAO,IAAIL,MAAMQ,MAAO,WACzCO,aAAiBV,MAAO,IAAIL,MAAMQ,MAAO,KAI1CG,cAEC,wBAEA,gBAEC,4EACA,gDAED,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEC,wFACA,yFAEA,0CAEA,yCAEC,4EAEC,2CAED,IAED,IAEA,yCAEC,wFAEC,2CAED,IAED,IAED,KAECD,KAAM","file":"../../threejs/ShaderToon.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * ShaderToon currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nTHREE.ShaderToon = {\n\n\t'toon1' : {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\t\t\t\"varying vec3 vRefract;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\t\"vec3 I = worldPosition.xyz - cameraPosition;\",\n\t\t\t\t\"vRefract = refract( normalize( I ), worldNormal, 1.02 );\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"varying vec3 vRefract;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\t\t\t\t\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\t\"float intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\n\t\t\t\t\"intensity += length(lightWeighting) * 0.2;\",\n\n\t\t\t\t\"float cameraWeighting = dot( normalize( vNormal ), vRefract );\",\n\t\t\t\t\"intensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\n\t\t\t\t\"intensity = intensity * 0.2 + 0.3;\",\n\n\t\t\t\t\"if ( intensity < 0.50 ) {\",\n\n\t\t\t\t\t\"gl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\n\n\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\"gl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'toon2' : {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x808080 ) },\n\t\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\n\t\t\t\t\"float light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\n\t\t\t\t\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\t\"if ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\n\n\t\t\t\t\t\"gl_FragColor *= vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\n\n\t\t\t\t\t\"gl_FragColor *= vec4( uLineColor2, 1.0 );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'hatching' : {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\":  { value: new THREE.Color( 0xffffff ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\t\t\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\t\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\t\t\t\"if ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 0.75 ) {\",\n\n\t\t\t\t\t\"if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor2, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\t\t\t\"if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor3, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 0.3465 ) {\",\n\n\t\t\t\t\t\"if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor4, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'dotted' : {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\":  { value: new THREE.Color( 0xffffff ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\t\t\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\t\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\t\t\t\"if ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\t\t\t\"if ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t}\n\n};\n"]}