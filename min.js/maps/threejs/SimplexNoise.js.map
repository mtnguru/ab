{"version":3,"sources":["threejs/SimplexNoise.js"],"names":["SimplexNoise","r","undefined","Math","this","grad3","grad4","p","i","floor","random","perm","simplex","prototype","dot","g","x","y","dot3","z","dot4","w","noise","xin","yin","n0","n1","n2","i1","j1","s","sqrt","j","G2","t","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","n3","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","n4","l1","l2","i3","j3","k3","l3","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"mappings":"AAaA,IAAIA,aAAe,SAASC,QAClBC,GAALD,IAAgBA,EAAIE,MACxBC,KAAKC,QAAW,EAAE,EAAE,KAAO,EAAE,EAAE,IAAM,GAAG,EAAE,KAAO,GAAG,EAAE,IACpB,EAAE,EAAE,KAAO,EAAE,EAAE,IAAM,EAAE,GAAG,KAAO,EAAE,GAAG,IACtC,EAAE,EAAE,IAAM,GAAG,EAAE,IAAM,EAAE,GAAG,IAAM,GAAG,GAAG,IAExED,KAAKE,QAAW,EAAE,EAAE,EAAE,IAAO,EAAE,EAAE,GAAG,IAAO,EAAE,GAAG,EAAE,IAAO,EAAE,GAAG,GAAG,IAC1D,GAAG,EAAE,EAAE,IAAO,GAAG,EAAE,GAAG,IAAO,GAAG,GAAG,EAAE,IAAO,GAAG,GAAG,GAAG,IACrD,EAAE,EAAE,EAAE,IAAO,EAAE,EAAE,GAAG,IAAO,EAAE,GAAG,EAAE,IAAO,EAAE,GAAG,GAAG,KAChD,EAAE,EAAE,EAAE,KAAQ,EAAE,EAAE,GAAG,KAAQ,EAAE,GAAG,EAAE,KAAQ,EAAE,GAAG,GAAG,IACrD,EAAE,EAAE,EAAE,IAAO,EAAE,EAAE,GAAG,IAAO,GAAG,EAAE,EAAE,IAAO,GAAG,EAAE,GAAG,KAChD,EAAE,EAAE,EAAE,KAAQ,EAAE,EAAE,GAAG,KAAQ,GAAG,EAAE,EAAE,KAAQ,GAAG,EAAE,GAAG,IACrD,EAAE,EAAE,EAAE,IAAO,EAAE,GAAG,EAAE,IAAO,GAAG,EAAE,EAAE,IAAO,GAAG,GAAG,EAAE,KAChD,EAAE,EAAE,EAAE,KAAQ,EAAE,GAAG,EAAE,KAAQ,GAAG,EAAE,EAAE,KAAQ,GAAG,GAAG,EAAE,IAE5DF,KAAKG,KACL,IAASC,EAAI,EAAGA,EAAI,IAAKA,IACxBJ,KAAKG,EAAEC,GAAKL,KAAKM,MAAmB,IAAbR,EAAES,UAG1BN,KAAKO,QACL,IAAK,IAAIH,EAAI,EAAGA,EAAI,IAAKA,IACxBJ,KAAKO,KAAKH,GAAKJ,KAAKG,EAAM,IAAJC,GAKvBJ,KAAKQ,UACA,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAC1F,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,KAGhGZ,aA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","file":"../../threejs/SimplexNoise.js","sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com \n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function(r) {\n\tif (r == undefined) r = Math;\n\tthis.grad3 = [[ 1,1,0 ],[ -1,1,0 ],[ 1,-1,0 ],[ -1,-1,0 ], \n                                 [ 1,0,1 ],[ -1,0,1 ],[ 1,0,-1 ],[ -1,0,-1 ], \n                                 [ 0,1,1 ],[ 0,-1,1 ],[ 0,1,-1 ],[ 0,-1,-1 ]]; \n\n\tthis.grad4 = [[ 0,1,1,1 ], [ 0,1,1,-1 ], [ 0,1,-1,1 ], [ 0,1,-1,-1 ],\n\t     [ 0,-1,1,1 ], [ 0,-1,1,-1 ], [ 0,-1,-1,1 ], [ 0,-1,-1,-1 ],\n\t     [ 1,0,1,1 ], [ 1,0,1,-1 ], [ 1,0,-1,1 ], [ 1,0,-1,-1 ],\n\t     [ -1,0,1,1 ], [ -1,0,1,-1 ], [ -1,0,-1,1 ], [ -1,0,-1,-1 ],\n\t     [ 1,1,0,1 ], [ 1,1,0,-1 ], [ 1,-1,0,1 ], [ 1,-1,0,-1 ],\n\t     [ -1,1,0,1 ], [ -1,1,0,-1 ], [ -1,-1,0,1 ], [ -1,-1,0,-1 ],\n\t     [ 1,1,1,0 ], [ 1,1,-1,0 ], [ 1,-1,1,0 ], [ 1,-1,-1,0 ],\n\t     [ -1,1,1,0 ], [ -1,1,-1,0 ], [ -1,-1,1,0 ], [ -1,-1,-1,0 ]];\n\n\tthis.p = [];\n\tfor (var i = 0; i < 256; i ++) {\n\t\tthis.p[i] = Math.floor(r.random() * 256);\n\t}\n  // To remove the need for index wrapping, double the permutation table length \n\tthis.perm = []; \n\tfor (var i = 0; i < 512; i ++) {\n\t\tthis.perm[i] = this.p[i & 255];\n\t} \n\n  // A lookup table to traverse the simplex around a given point in 4D. \n  // Details can be found where this table is used, in the 4D noise method. \n\tthis.simplex = [ \n    [ 0,1,2,3 ],[ 0,1,3,2 ],[ 0,0,0,0 ],[ 0,2,3,1 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 1,2,3,0 ], \n    [ 0,2,1,3 ],[ 0,0,0,0 ],[ 0,3,1,2 ],[ 0,3,2,1 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 1,3,2,0 ], \n    [ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ], \n    [ 1,2,0,3 ],[ 0,0,0,0 ],[ 1,3,0,2 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 2,3,0,1 ],[ 2,3,1,0 ], \n    [ 1,0,2,3 ],[ 1,0,3,2 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 2,0,3,1 ],[ 0,0,0,0 ],[ 2,1,3,0 ], \n    [ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ], \n    [ 2,0,1,3 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 3,0,1,2 ],[ 3,0,2,1 ],[ 0,0,0,0 ],[ 3,1,2,0 ], \n    [ 2,1,0,3 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 0,0,0,0 ],[ 3,1,0,2 ],[ 0,0,0,0 ],[ 3,2,0,1 ],[ 3,2,1,0 ]]; \n};\n\nSimplexNoise.prototype.dot = function(g, x, y) { \n\treturn g[0] * x + g[1] * y;\n};\n\nSimplexNoise.prototype.dot3 = function(g, x, y, z) {\n\treturn g[0] * x + g[1] * y + g[2] * z; \n};\n\nSimplexNoise.prototype.dot4 = function(g, x, y, z, w) {\n\treturn g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n};\n\nSimplexNoise.prototype.noise = function(xin, yin) { \n\tvar n0, n1, n2; // Noise contributions from the three corners \n  // Skew the input space to determine which simplex cell we're in \n\tvar F2 = 0.5 * (Math.sqrt(3.0) - 1.0); \n\tvar s = (xin + yin) * F2; // Hairy factor for 2D \n\tvar i = Math.floor(xin + s); \n\tvar j = Math.floor(yin + s); \n\tvar G2 = (3.0 - Math.sqrt(3.0)) / 6.0; \n\tvar t = (i + j) * G2; \n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space \n\tvar Y0 = j - t; \n\tvar x0 = xin - X0; // The x,y distances from the cell origin \n\tvar y0 = yin - Y0; \n  // For the 2D case, the simplex shape is an equilateral triangle. \n  // Determine which simplex we are in. \n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords \n\tif (x0 > y0) {i1 = 1; j1 = 0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1) \n\telse {i1 = 0; j1 = 1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1) \n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and \n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where \n  // c = (3-sqrt(3))/6 \n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords \n\tvar y1 = y0 - j1 + G2; \n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords \n\tvar y2 = y0 - 1.0 + 2.0 * G2; \n  // Work out the hashed gradient indices of the three simplex corners \n\tvar ii = i & 255; \n\tvar jj = j & 255; \n\tvar gi0 = this.perm[ii + this.perm[jj]] % 12; \n\tvar gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12; \n\tvar gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; \n  // Calculate the contribution from the three corners \n\tvar t0 = 0.5 - x0 * x0 - y0 * y0; \n\tif (t0 < 0) n0 = 0.0; \n\telse { \n\t\tt0 *= t0; \n\t\tn0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient \n\t} \n\tvar t1 = 0.5 - x1 * x1 - y1 * y1; \n\tif (t1 < 0) n1 = 0.0; \n\telse { \n\t\tt1 *= t1; \n\t\tn1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1); \n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2; \n\tif (t2 < 0) n2 = 0.0; \n\telse { \n\t\tt2 *= t2; \n\t\tn2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2); \n\t} \n  // Add contributions from each corner to get the final noise value. \n  // The result is scaled to return values in the interval [-1,1]. \n\treturn 70.0 * (n0 + n1 + n2); \n};\n\n// 3D simplex noise \nSimplexNoise.prototype.noise3d = function(xin, yin, zin) { \n\tvar n0, n1, n2, n3; // Noise contributions from the four corners \n  // Skew the input space to determine which simplex cell we're in \n\tvar F3 = 1.0 / 3.0; \n\tvar s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D \n\tvar i = Math.floor(xin + s); \n\tvar j = Math.floor(yin + s); \n\tvar k = Math.floor(zin + s); \n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too \n\tvar t = (i + j + k) * G3; \n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space \n\tvar Y0 = j - t; \n\tvar Z0 = k - t; \n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin \n\tvar y0 = yin - Y0; \n\tvar z0 = zin - Z0; \n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron. \n  // Determine which simplex we are in. \n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords \n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords \n\tif (x0 >= y0) { \n\t\tif (y0 >= z0) \n      { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; } // X Y Z order \n      else if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; } // X Z Y order \n\t\telse { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; } // Z X Y order \n\t} \n\telse { // x0<y0 \n\t\tif (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; } // Z Y X order \n    else if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; } // Y Z X order \n\t\telse { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; } // Y X Z order \n\t} \n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z), \n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and \n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where \n  // c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords \n\tvar y1 = y0 - j1 + G3; \n\tvar z1 = z0 - k1 + G3; \n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords \n\tvar y2 = y0 - j2 + 2.0 * G3; \n\tvar z2 = z0 - k2 + 2.0 * G3; \n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords \n\tvar y3 = y0 - 1.0 + 3.0 * G3; \n\tvar z3 = z0 - 1.0 + 3.0 * G3; \n  // Work out the hashed gradient indices of the four simplex corners \n\tvar ii = i & 255; \n\tvar jj = j & 255; \n\tvar kk = k & 255; \n\tvar gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12; \n\tvar gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12; \n\tvar gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12; \n\tvar gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; \n  // Calculate the contribution from the four corners \n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0; \n\tif (t0 < 0) n0 = 0.0; \n\telse { \n\t\tt0 *= t0; \n\t\tn0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0); \n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1; \n\tif (t1 < 0) n1 = 0.0; \n\telse { \n\t\tt1 *= t1; \n\t\tn1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1); \n\t} \n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2; \n\tif (t2 < 0) n2 = 0.0; \n\telse { \n\t\tt2 *= t2; \n\t\tn2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2); \n\t} \n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3; \n\tif (t3 < 0) n3 = 0.0; \n\telse { \n\t\tt3 *= t3; \n\t\tn3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3); \n\t} \n  // Add contributions from each corner to get the final noise value. \n  // The result is scaled to stay just inside [-1,1] \n\treturn 32.0 * (n0 + n1 + n2 + n3); \n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function( x, y, z, w ) {\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\t\n   // The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n\tvar G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n   // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = (x + y + z + w) * F4; // Factor for 4D skewing\n\tvar i = Math.floor(x + s);\n\tvar j = Math.floor(y + s);\n\tvar k = Math.floor(z + s);\n\tvar l = Math.floor(w + s);\n\tvar t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0;  // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n   // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n   // To find out which of the 24 possible simplices we're in, we need to\n   // determine the magnitude ordering of x0, y0, z0 and w0.\n   // The method below is a good way of finding the ordering of x,y,z,w and\n   // then find the correct traversal order for the simplex we’re in.\n   // First, six pair-wise comparisons are performed between each possible pair\n   // of the four coordinates, and the results are used to add up binary bits\n   // for an integer index.\n\tvar c1 = (x0 > y0) ? 32 : 0;\n\tvar c2 = (x0 > z0) ? 16 : 0;\n\tvar c3 = (y0 > z0) ? 8 : 0;\n\tvar c4 = (x0 > w0) ? 4 : 0;\n\tvar c5 = (y0 > w0) ? 2 : 0;\n\tvar c6 = (z0 > w0) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n   // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n   // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n   // impossible. Only the 24 indices which have non-zero entries make any sense.\n   // We use a thresholding to set the coordinates in turn from the largest magnitude.\n   // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[c][0] >= 3 ? 1 : 0;\n\tj1 = simplex[c][1] >= 3 ? 1 : 0;\n\tk1 = simplex[c][2] >= 3 ? 1 : 0;\n\tl1 = simplex[c][3] >= 3 ? 1 : 0;\n   // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[c][0] >= 2 ? 1 : 0;\n\tj2 = simplex[c][1] >= 2 ? 1 : 0;    k2 = simplex[c][2] >= 2 ? 1 : 0;\n\tl2 = simplex[c][3] >= 2 ? 1 : 0;\n   // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[c][0] >= 1 ? 1 : 0;\n\tj3 = simplex[c][1] >= 1 ? 1 : 0;\n\tk3 = simplex[c][2] >= 1 ? 1 : 0;\n\tl3 = simplex[c][3] >= 1 ? 1 : 0;\n   // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n   // Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n\tvar gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n\tvar gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n\tvar gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n\tvar gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;\n   // Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif (t0 < 0) n0 = 0.0;\n\telse {\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif (t1 < 0) n1 = 0.0;\n\telse {\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif (t2 < 0) n2 = 0.0;\n\telse {\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n\t}   var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif (t3 < 0) n3 = 0.0;\n\telse {\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif (t4 < 0) n4 = 0.0;\n\telse {\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n\t}\n   // Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * (n0 + n1 + n2 + n3 + n4);\n};\n"]}