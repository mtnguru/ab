THREE.CCDIKSolver=function(e){this.mesh=e},THREE.CCDIKSolver.prototype={constructor:THREE.CCDIKSolver,update:function(){for(var e=new THREE.Vector3,o=new THREE.Vector3,t=new THREE.Vector3,n=new THREE.Quaternion,r=this.mesh.skeleton.bones,i=this.mesh.geometry.iks,a=Math,l=0,s=i.length;l<s;l++)for(var m=i[l],g=r[m.effector],u=r[m.target].getWorldPosition(),v=m.links,E=void 0!==m.iteration?m.iteration:1,c=0;c<E;c++)for(var d=0,h=v.length;d<h;d++){var p=r[v[d].index],f=v[d].limitation,A=p.getWorldPosition(),x=p.getWorldQuaternion().inverse(),H=g.getWorldPosition();e.subVectors(H,A),e.applyQuaternion(x),e.normalize(),o.subVectors(u,A),o.applyQuaternion(x),o.normalize();var R=o.dot(e);if(R>1?R=1:R<-1&&(R=-1),R=a.acos(R),void 0!==m.minAngle&&R<m.minAngle&&(R=m.minAngle),void 0!==m.maxAngle&&R>m.maxAngle&&(R=m.maxAngle),t.crossVectors(e,o),t.normalize(),n.setFromAxisAngle(t,R),p.quaternion.multiply(n),void 0!==f){var T=p.quaternion.w;T>1&&(T=1);var y=a.sqrt(1-T*T);p.quaternion.set(f.x*y,f.y*y,f.z*y,T)}p.updateMatrixWorld(!0)}}};
//# sourceMappingURL=../../maps/threejs/animation/CCDIKSolver.js.map
