{"version":3,"sources":["producers/prod_backbone_builder.js"],"names":["Drupal","atomizer","producers","backbone_builderC","_viewer","highlightAttachProtons","protons","face","color","i","abc","proton","currentHex","material","getHex","setHex","highlightedFace","highlightedNuclet","atomConf","buildInitialBackbone","viewer","intersectList","protonRadius","theme","get","tetrahedronId","protonId","atom","THREE","Group","name","az","tetrahedrons","createTetrahedron","type","tetrahedron","geometry","TetrahedronGeometry","nuclet","dynamic","add","createGeometryWireframe","createGeometryFaces","saveYml","data","components","pid","position","attachments","tid","list","length","azid","push","geometries","base","doAjax","source","component","filepath","ymlContents","savedYml","response","loadYml","results","createAtom","loadAtom","settings","fart","scene","remove","localStorage","setItem","replace","AxisHelper","num","Geometry","protonConf","pos","Vector3","vertices","applyMatrix","Matrix4","makeRotationY","Math","PI","makeTranslation","x","y","makeRotationX","makeRotationZ","verticesNeedUpdate","render","p","makeProton","z","verticeIds","sprites","createVerticeIds","geometryConf","children","v","parseInt","toString","createNuclet","setDefaults","createView","nucletC","atomC","backbone","getYmlDirectory","view","ghostProton","ghostTetrahedron","intersectObjects","intersected","intersects","faceIndex","object","parent","centroid","vertice","copy","divideScalar","normal","scaled_normal","v4","normalsNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","tangentsNeedUpdate","computeFaceNormals","computeVertexNormals","mouseClick","event","Object","keys"],"mappings":"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","file":"../../producers/prod_backbone_builder.js","sourcesContent":["/**\n * @file - prod_backbone_builder.js\n *\n * Viewer to create the initial backbone nuclet geometry.\n * Allows a user to add protons one at a time to a helium nuclet.\n * Once the nuclet is completed, the geometry will be stored to build further nuclets.\n *\n */\n\nDrupal.atomizer.producers.backbone_builderC = function (_viewer) {\n\n  var buildInitialBackbone = false;\n  var viewer = _viewer;\n\n  var abc = ['a', 'b', 'c'];\n\n  var highlightedFace;\n  var highlightedNuclet;\n  var intersectList = [];\n  var protonRadius = viewer.theme.get('proton--radius');\n  var tetrahedronId = 0;\n  var protonId = 0;\n\n  var atomConf;\n  var atom = new THREE.Group();\n  atom.name = 'atom';\n  atom.az = {\n    protons: {},\n    tetrahedrons: {}\n  };\n\n  /**\n   * Set the defaults for this producer.\n   */\n  function setDefaults() {\n  }\n\n  /**\n   * Create the ghost proton and wireframe that appear when hovering over a valid face to add a proton.\n   *\n   * @param type\n   * @returns {THREE.Group}\n   */\n  var createTetrahedron = function createTetrahedron(type) {\n    // Create a new ghost wireframe\n    var tetrahedron = new THREE.Group();\n    tetrahedron.name = 'tetrahedron';\n    tetrahedron.protons = [];\n    tetrahedron.protonRadius = protonRadius;\n\n    var geometry = new THREE.TetrahedronGeometry(viewer.nuclet.protonRadius * 1.222);\n    geometry.dynamic = true;\n\n    // Create Wireframe\n    tetrahedron.add(viewer.nuclet.createGeometryWireframe(\n      type + 'Wireframe',\n      1,\n      geometry,\n      null,\n      null\n    ));\n\n    // Create faces\n    tetrahedron.add(viewer.nuclet.createGeometryFaces(\n      type + 'Faces',\n      1,\n      geometry,\n      null,\n      null\n    ));\n\n    return tetrahedron;\n  };\n\n  /**\n   * Highlight the protons the new proton will attach to.\n   *\n   * @param protons\n   * @param face\n   * @param color\n   */\n  function highlightAttachProtons(protons, face, color) {\n    for (var i in abc) {\n      var proton = protons[face[abc[i]]];\n      if (color) {\n        proton.currentHex = proton.material.color.getHex();\n        proton.material.color.setHex(color);\n      } else {\n        proton.material.color.setHex(proton.currentHex);\n      }\n    }\n  }\n\n  /** Add a new proton and wireframe to the nuclet.\n   *\n   * @param event\n   */\n  var mouseClick = function mouseClick(event) {\n    if (highlightedFace) {\n\n      highlightAttachProtons(highlightedNuclet.protons, highlightedFace);\n\n      var proton = viewer.view.ghostProton;\n      proton.material.color.setHex(parseInt(viewer.theme.get('proton-default--color').replace(/#/, \"0x\")), 16);\n\n      var tetrahedron = viewer.view.ghostTetrahedron;\n      tetrahedron.children[0].material.color.setHex(parseInt(viewer.theme.get('tetraWireframe--color').replace(/#/, \"0x\")), 16);\n      tetrahedron.children[0].name = 'tetraWireframe';\n      tetrahedron.children[1].material.color.setHex(parseInt(viewer.theme.get('tetraFaces--color').replace(/#/, \"0x\")), 16);\n      tetrahedron.children[1].name = 'tetraFaces';\n\n      intersectList.push(tetrahedron.children[1]);\n\n      // Add proton to atom list and tetrahedron list\n      proton.azid = 'p' + Object.keys(atom.az.protons).length;\n      atom.az.protons[proton.azid] = proton;   // Add proton to list of protons\n      tetrahedron.protons[3] = proton;    // Add proton to tetrahedron\n\n      // Add tetrahedron to atom list\n      tetrahedron.azid = 't' + Object.keys(atom.az.tetrahedrons).length;\n      atom.az.tetrahedrons[tetrahedron.azid] = tetrahedron;\n\n      highlightedFace = null;\n      highlightedNuclet = null;\n\n      // Create a new ghost Proton\n      viewer.view.ghostProton = viewer.nuclet.makeProton(\n        'ghost',\n        viewer.theme.get('proton--opacity'),\n        {x: 300, y: 50, z: 0}\n      );\n\n      // Create a new ghost Tetrahedron\n      viewer.view.ghostTetrahedron = createTetrahedron('ghost');\n\n      viewer.render();\n    }\n  };\n\n  /**\n   * Mouse intersects an active face on a tetrahedron.\n   * @param intersects\n   */\n  var intersected = function intersected(intersects) {\n    // If a face is intersected then add the new tetrahedron/proton temporarily until intersect is gone.\n    if (intersects.length == 0) {\n      if (highlightedFace) {\n        highlightAttachProtons(highlightedNuclet.protons, highlightedFace);\n        highlightedFace = null;\n        highlightedNuclet.children[0].remove(viewer.view.ghostProton);\n        highlightedNuclet.children[0].remove(viewer.view.ghostTetrahedron);\n        viewer.render();\n      }\n    } else {\n      if (highlightedFace != intersects[0].face) {\n        // Change protons back to their original color\n        if (highlightedFace) {\n          highlightAttachProtons(highlightedNuclet.protons, highlightedFace);\n          highlightedNuclet.children[0].remove(viewer.view.ghostProton);\n          highlightedNuclet.children[0].remove(viewer.view.ghostTetrahedron);\n        }\n\n        highlightedFace = intersects[0].face;\n        var faceIndex = intersects[0].faceIndex;\n        highlightedNuclet = intersects[0].object.parent;\n\n        // Find vertices for this face and find the centroid.\n        highlightedFace.centroid = new THREE.Vector3(0, 0, 0);\n        for (var i in abc) {\n          var vertice = highlightedFace[abc[i]];\n          var proton = highlightedNuclet.protons[vertice];\n\n          // Add the protons position to the centroid\n          highlightedFace.centroid.add(proton.position);\n\n          // Set the tetrahedron vertice from the proton position\n          viewer.view.ghostTetrahedron.children[0].geometry.vertices[i].copy(proton.position);\n\n          viewer.view.ghostTetrahedron.protons[i] = proton;\n        }\n        highlightedFace.centroid.divideScalar(3);\n\n\n        // Scale the face normal to proper length.\n        var normal = highlightedFace.normal;\n        var scale = 1.615;\n        var scaled_normal = {\n          x: normal.x * scale * highlightedNuclet.protonRadius,\n          y: normal.y * scale * highlightedNuclet.protonRadius,\n          z: normal.z * scale * highlightedNuclet.protonRadius\n        };\n\n        // Calculate the location of the fourth vertex.\n        var v4 = {\n          x: highlightedFace.centroid.x + scaled_normal.x,\n          y: highlightedFace.centroid.y + scaled_normal.y,\n          z: highlightedFace.centroid.z + scaled_normal.z,\n        };\n\n        // Set the ghost protons fourth vertice and add to the nuclet\n        viewer.view.ghostProton.position.copy(v4);\n        highlightedNuclet.children[0].add(viewer.view.ghostProton);\n\n        // Set the ghost wireframes fourth vertex and add to the nuclet\n        viewer.view.ghostTetrahedron.children[0].geometry.vertices[3].copy(v4);\n        viewer.view.ghostTetrahedron.children[0].geometry.verticesNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[0].geometry.normalsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[0].geometry.elementsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[0].geometry.uvsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[0].geometry.tangentsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[0].geometry.computeFaceNormals();\n        viewer.view.ghostTetrahedron.children[0].geometry.computeVertexNormals();\n\n        viewer.view.ghostTetrahedron.children[1].geometry.vertices[3].copy(v4);\n        viewer.view.ghostTetrahedron.children[1].geometry.verticesNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[1].geometry.normalsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[1].geometry.elementsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[1].geometry.uvsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[1].geometry.tangentsNeedUpdate = true;\n        viewer.view.ghostTetrahedron.children[1].geometry.computeFaceNormals();\n        viewer.view.ghostTetrahedron.children[1].geometry.computeVertexNormals();\n        highlightedNuclet.children[0].add(viewer.view.ghostTetrahedron);\n\n        color = viewer.theme.get('proton-vattach--color');\n        highlightAttachProtons(highlightedNuclet.protons, highlightedFace, color.replace('#', '0x'));\n\n        viewer.render();\n      }\n    }\n  };\n\n  /**\n   * Provide external access to the objects which are to be intersected with the mouse.\n   *\n   * @returns {Array}\n   */\n  var intersectObjects = function intersectObjects() {\n    return intersectList;\n  };\n\n  /**\n   * Create an array for the protons and faces of the current atom.  Save to YAML file.\n   * @param data\n   */\n  var saveYml = function saveYml(data) {\n    var nuclet = {\n      name: data.name,\n      protonRadius: protonRadius,\n      protons: {},\n      components: {}\n    };\n\n    for (var pid in atom.az.protons) {\n      var proton = atom.az.protons[pid];\n      nuclet.protons[pid] = {\n//      position: proton.position.multiplyScalar(1 / protonRadius),\n        position: proton.position,\n        attachments: []\n      };\n    }\n\n    for (var tid in atom.az.tetrahedrons) {\n      var tetrahedron = atom.az.tetrahedrons[tid];\n      var list = [];\n      for (var i = 0; i < tetrahedron.protons.length; i++) {\n        var pid = tetrahedron.protons[i].azid;\n        list[i] = pid;\n        nuclet.protons[pid].attachments.push(tid);\n      }\n      nuclet.geometries[tid] = {\n        geometry: 'tetrahedron',\n        protons: list\n      }\n    }\n\n    // Create file which stores position of all protons.\n    Drupal.atomizer.base.doAjax(\n      '/ajax-ab/saveYml',\n      { name: data.name,\n        source: 'backbone_builder',\n        component: 'theme',\n        filepath: data.filepath,\n        ymlContents: nuclet\n      },\n      savedYml\n    );\n    return;\n  };\n\n  /**\n   * The atom was saved, display a message.\n   *\n   * @param response\n   */\n  var savedYml = function savedYml (response) {\n    // display a message.\n    return;\n  };\n\n  /**\n   * Load a theme yml file and make it the current theme set.\n   *\n   * @param results\n   */\n  var loadYml = function (results) {\n    createAtom(results);\n  };\n\n  /**\n   * Start the AJAX load of a new atom.\n   *\n   * @param filepath\n   * @param settings\n   */\n  var loadAtom = function loadAtom (filepath, settings) {\n    // Verify they entered a name.  If not popup an alert. return\n    Drupal.atomizer.base.doAjax(\n      '/ajax-ab/loadYml',\n      { component: 'backbone',\n        settings: {fart: 'cool'},\n        filepath: filepath\n      },\n      createAtom\n    );\n  };\n\n  /**\n   * A new atom has been successfully loaded, create it and render it.\n   *\n   * @param results\n   */\n  var createAtom = function createAtom (results) {\n\n    function createNuclet(num) {\n      // Use the proton configuration information to create a geometry.\n      var geometry = new THREE.Geometry();\n      for (var pid in atomConf.protons) {\n        var protonConf = atomConf.protons[pid];\n        var pos = new THREE.Vector3(\n          protonConf.position['x'],\n          protonConf.position['y'],\n          protonConf.position['z']\n        );\n        geometry.vertices.push(pos);\n      }\n\n      if (buildInitialBackbone) {\n        // Do translations to initial geometry\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(Math.PI / 4));\n        geometry.applyMatrix(new THREE.Matrix4().makeTranslation(-geometry.vertices[8].x, -geometry.vertices[8].y, 0));\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationX(Math.PI));\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(-Math.PI / 2.125));\n        geometry.verticesNeedUpdate = true;\n        viewer.render();\n        if (num == 1) {\n          geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(Math.PI));\n          geometry.applyMatrix(new THREE.Matrix4().makeRotationX(Math.PI));\n        }\n        geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, -geometry.vertices[6].y, 0));\n      }\n\n      //  Create Protons\n      var p = 0;\n      for (var pid in atomConf.protons) {\n        var protonConf = atomConf.protons[pid];\n        var position = geometry.vertices[p];\n        var proton = viewer.nuclet.makeProton(\n          'default',\n          viewer.theme.get('proton--opacity'),\n          {\n            x: position['x'],\n            y: position['y'],\n            z: position['z']\n          }\n        );\n        proton.azid = 'p' + protonId++;\n        atom.az.protons[proton.azid] = proton;\n        atom.add(proton);\n        p++;\n      }\n      var verticeIds = viewer.sprites.createVerticeIds ('proton', geometry);\n      atom.add(verticeIds);\n\n      // Create Tetrahedrons\n      for (var tid in atomConf.components) {\n        var geometryConf = atomConf.components[tid];\n        if (geometryConf.geometry == 'tetrahedron') {\n          // Add the first tetrahedrons\n          var tetrahedron = createTetrahedron('tetra');\n          tetrahedron.azid = 't' + tetrahedronId++;\n          intersectList.push(tetrahedron.children[1]); // Attach the faces Mesh\n          atom.az.tetrahedrons[tetrahedron.azid] = tetrahedron;\n\n          // Set 4 vertices of tetrahedron\n          tetrahedron.children[1].geometry.protons = [];\n          for (var v = 0; v < 4; v++) {\n            var pid;\n            if (num == 1) {\n              var pid2 = parseInt(geometryConf.protons[v].replace('p', '')) + 10;\n              pid = 'p' + pid2.toString();\n              if (pid == 'p09') pid = 'p9';\n            } else {\n              pid = geometryConf.protons[v];\n            }\n            var proton = atomConf.protons[pid];\n            tetrahedron.children[0].geometry.vertices[v].x = atom.az.protons[pid].position.x;\n            tetrahedron.children[0].geometry.vertices[v].y = atom.az.protons[pid].position.y;\n            tetrahedron.children[0].geometry.vertices[v].z = atom.az.protons[pid].position.z;\n\n            tetrahedron.children[1].geometry.vertices[v].x = atom.az.protons[pid].position.x;\n            tetrahedron.children[1].geometry.vertices[v].y = atom.az.protons[pid].position.y;\n            tetrahedron.children[1].geometry.vertices[v].z = atom.az.protons[pid].position.z;\n\n            // Save the proton list in tetrafaces mesh\n            tetrahedron.protons[v] = atom.az.protons[pid];\n          }\n\n  //      tetrahedron.children[0].geometry.verticesNeedUpdate = true;\n  //      tetrahedron.children[0].geometry.normalsNeedUpdate = true;\n  //      tetrahedron.children[0].geometry.elementsNeedUpdate = true;\n  //      tetrahedron.children[0].geometry.uvsNeedUpdate = true;\n  //      tetrahedron.children[0].geometry.tangentsNeedUpdate = true;\n  //      tetrahedron.children[0].geometry.computeFaceNormals();\n  //      tetrahedron.children[0].geometry.computeVertexNormals();\n\n  //      tetrahedron.children[1].geometry.verticesNeedUpdate = true;\n  //      tetrahedron.children[1].geometry.normalsNeedUpdate = true;\n  //      tetrahedron.children[1].geometry.elementsNeedUpdate = true;\n  //      tetrahedron.children[1].geometry.uvsNeedUpdate = true;\n  //      tetrahedron.children[1].geometry.tangentsNeedUpdate = true;\n  //      tetrahedron.children[1].geometry.computeFaceNormals();\n  //      tetrahedron.children[1].geometry.computeVertexNormals();\n\n//        tetrahedron.scale.set(5, 5, 5);\n          atom.add(tetrahedron);\n        }\n      }\n    } // end function createNuclet()\n\n    tetrahedronId = 0;\n    protonId = 0;\n\n    if (atom) {\n      viewer.scene.remove(atom);\n    }\n    atomConf = results[0].ymlContents;\n    atomConf['filepath'] = results[0].data.filepath;\n    localStorage.setItem('atomizer_builder_backbone', results[0].data.filepath.replace(/^.*[\\\\\\/]/, ''));\n\n    atom = new THREE.Group();\n    atom.add(new THREE.AxisHelper(500));\n    atom.name = 'atom';\n    atom.az = {\n      protons: [],\n      tetrahedrons: []\n    }\n\n    for (var i = 0; i < 2; i++) {\n      if (!buildInitialBackbone && i == 1) {\n\n      } else {\n        createNuclet(i);\n      }\n    }\n\n    if (buildInitialBackbone) {\n      var proton;\n      x = 0;\n      y = -80.25;\n      z = 50;\n      // Create ghost proton\n      proton = viewer.nuclet.makeProton(\n        'default',\n        viewer.theme.get('proton--opacity'),\n        {x: x, y: y, z: z}\n      );\n      proton.azid = 'p18';\n      atom.az.protons['p18'] = proton;\n      atom.add(proton);\n\n      // Create ghost proton\n      proton = viewer.nuclet.makeProton(\n        'default',\n        viewer.theme.get('proton--opacity'),\n        {x: x, y: y, z: -z}\n      );\n      proton.azid = 'p19';\n      atom.az.protons['p19'] = proton;\n      atom.add(proton);\n    }\n\n    // Add the atom to the scene and render it.\n    viewer.scene.add(atom);\n    viewer.render();\n  };\n\n  /**\n   * Create the initial view.\n   */\n  var createView = function () {\n    viewer.nuclet = Drupal.atomizer.nucletC(viewer);\n    viewer.atom = Drupal.atomizer.atomC(viewer);\n\n    // model after the atom - read in the file and build it.\n    viewer.backbone = {\n      getYmlDirectory: function () { return 'config/backbone'; },\n      saveYml: saveYml,\n      loadYml: loadYml\n    };\n\n    // Create ghost proton\n    viewer.view.ghostProton = viewer.nuclet.makeProton(\n      'ghost',\n      viewer.theme.get('proton--opacity'),\n      {x: 300, y: 50, z: 0}\n    );\n\n\n    // Create ghost Tetrahedron\n    var tetrahedron = createTetrahedron('ghost');\n    tetrahedron.protons = [];\n    viewer.view.ghostTetrahedron = tetrahedron;\n\n    // Start loading the default atom.\n//  loadAtom('config/backbone/half_backbone.yml');\n    if (buildInitialBackbone) {\n      loadAtom('config/backbone/half_backbone.yml');\n    } else {\n      loadAtom('config/backbone/back.yml');\n    }\n  };\n\n  // Set functions to return for external use - makes this into a pseudo class.\n  return {\n    setDefaults: setDefaults,\n    createView: createView,\n    intersectObjects: intersectObjects,\n    intersected: intersected,\n    mouseClick: mouseClick,\n  };\n};\n"]}