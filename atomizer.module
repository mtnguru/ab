<?php

/**
 * @file
 * Contains atomizer.module..
 */

use Drupal\atomizer\AtomizerFiles;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_help().
 */
function atomizer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the atomizer module.
    case 'help.page.atomizer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Interactively create atoms in a 3D image that can be rotated, saved, etc.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the node_atom_form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function atomizer_form_node_atom_form_alter(&$form, FormStateInterface $form_state) {
//$form['field_atomic_structure']['#access'] = false;
  $form['actions']['preview']['#access'] = false;
  $form['actions']['submit']['#access'] = true;
  $form['actions']['publish']['#value'] = t('Create New');
  $form['actions']['unpublish']['#access'] = false;

  $form['title']['widget'][0]['value']['#title'] = t('Atom Name');

  unset($form['field__inner_electrons']['widget'][0]['value']['#description']);
  unset($form['field__outer_electrons']['widget'][0]['value']['#description']);
  unset($form['field__p']['widget'][0]['value']['#description']);
  unset($form['field_element']['widget'][0]['target_id']['#description']);
  unset($form['field_stability']['widget']['#description']);
  unset($form['field_isotope']['widget'][0]['value']['#description']);

  $form['path']['#access'] = false;

  // Remove the vertical tabs
  if (!\Drupal::currentUser()->hasPermission('atomizer display structure')) {
    $form['field_atomic_structure']['#access'] == false;

    unset($form['advanced']);
    foreach ($form as $key => $value) {
      if (is_array($form[$key]) && isset($form[$key]['#group'])) {
        unset($form[$key]);
      }
    }
  }

  return;
}

function atomizer_form_atomizer_controls_form_alter (&$form, FormStateInterface $form_state) {
  return;
}

function atomizer_form_views_exposed_form_alter (&$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-view-select-nuclei-select-nuclei') {

    /***
    $form['col1'] = [
      '#type' => 'container',
      '#title' => t('stuff'),
//    '#tree' => true,
    ];
    $form['col1']['field_family_target_id'] = $form['field_family_target_id'];
    unset($form['field_family_target_id']);

    $form['col1']['field_isotope_value'] = $form['field_isotope_value'];
    unset($form['field_isotope_value']);

    $form['col1']['field_stability_target_id'] = $form['field_stability_target_id'];
    unset($form['field_stability_target_id']);

    $form['col2'] = [
      '#type' => 'container',
      '#title' => t('stuff 2'),
//    '#collapsible' => true,
//    '#collapsed' => true,
//    '#tree' => true,
    ];
    $form['col2']['field__p_value'] = $form['field__p_value'];
    unset($form['field__p_value']);

    $form['col2']['field__inner_electrons_value'] = $form['field__inner_electrons_value'];
    unset($form['field__inner_electrons_value']);

    $form['col2']['field__outer_electrons_value'] = $form['field__outer_electrons_value'];
    unset($form['field__outer_electrons_value']);
    ****/

  }
  return;
}

function atomizer_form_alter (&$form, FormStateInterface $form_state) {
  return;
}

/**
 * Atomizer Edit form alterations - node-atomizer-edit-form
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function atomizer_form_node_atomizer_edit_form_alter (&$form, FormStateInterface $form_state) {
  // Set the field_configuration_file option to the list of files in atomizer/config/atomizers.
  $form['field_configuration_file']['widget']['#options'] = AtomizerFiles::createFileList(drupal_get_path('module', 'atomizer') . '/config/atomizers', '/\.yml/');

  $form['#validate'][] = 'atomizer_form_node_atomizer_validate';
//foreach (array_keys($form['actions']) as $action) {
//  if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
//    $form['actions'][$action]['#submit'][] = 'atomizer_form_node_atomizer_submit';
//  }
//}
}

function atomizer_form_node_atomizer_submit (&$form, FormStateInterface $form_state) {
  return;
}

function atomizer_form_node_atomizer_validate (&$form, FormStateInterface $form_state) {
//$errors = $form_state->getErrors();
//if (!empty($errors['field_configuration_file'])) {
//  $form_state->clearErrors();
//};
}

function atomizer_views_pre_render($view) {
  return $view;
}

function atomizer_views_post_render($view, &$output, $cache) {
  return;
}

function atomizer_preprocess_node(&$variables) {
  $type = $variables['node']->getType();
  switch ($type) {

    case 'atomizer':
      // Add Select Atom Views block.
      $variables['content']['view_select_atom'] = views_embed_view('az_atom', 'select_atom');

      // Read in configuration yml file
      if (!empty($variables['node']->field_configuration_file)) {
        $atomizer_block = \Drupal::entityManager()->getStorage('block')->load('atom_builder');

        if (!empty($atomizer_block)) {
          $config = Yaml::decode($variables['node']->field_configuration_file->value);
          $atomizer_block->getPlugin()->setConfigurationValue('atomizer_config', $config);
          $atomizer_block->save();
          $variables['content']['atomizer_block'] = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($atomizer_block);
        }
      }
      break;
  } // switch ($type)

  return;
}
