{"version":3,"sources":["threejs/RollerCoaster.js"],"names":["RollerCoasterGeometry","curve","size","THREE","BufferGeometry","call","this","vertices","normals","colors","color1","color2","up","Vector3","forward","right","quaternion","Quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","shape","offset","color","j","jl","length","point1","point2","add","applyQuaternion","x","y","z","normalize","set","subVectors","crossVectors","atan2","drawShape","addAttribute","BufferAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","TreesGeometry","landscape","raycaster","Raycaster","ray","direction","origin","intersections","intersectObject","height"],"mappings":"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","file":"../../threejs/RollerCoaster.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar RollerCoasterGeometry = function ( curve, size ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar colors = [];\n\n\tvar color1 = [ 1, 1, 1 ];\n\tvar color2 = [ 1, 1, 0 ];\n\n\tvar up = new THREE.Vector3( 0, 1, 0 );\n\tvar forward = new THREE.Vector3();\n\tvar right = new THREE.Vector3();\n\n\tvar quaternion = new THREE.Quaternion();\n\tvar prevQuaternion = new THREE.Quaternion();\n\tprevQuaternion.setFromAxisAngle( up , Math.PI / 2 );\n\n\tvar point = new THREE.Vector3();\n\tvar prevPoint = new THREE.Vector3();\n\tprevPoint.copy( curve.getPointAt( 0 ) );\n\n\t// shapes\n\n\tvar step = [\n\t\tnew THREE.Vector3( -2.25,  0, 0 ),\n\t\tnew THREE.Vector3(  0,  -0.5, 0 ),\n\t\tnew THREE.Vector3(  0, -1.75, 0 ),\n\n\t\tnew THREE.Vector3(  0,  -0.5, 0 ),\n\t\tnew THREE.Vector3(  2.25,  0, 0 ),\n\t\tnew THREE.Vector3(  0, -1.75, 0 )\n\t];\n\n\tvar PI2 = Math.PI * 2;\n\n\tvar sides = 5;\n\tvar tube1 = [];\n\n\tfor ( var i = 0; i < sides; i ++ ) {\n\n\t\tvar angle = ( i / sides ) * PI2;\n\t\ttube1.push( new THREE.Vector3( Math.sin( angle ) * 0.6, Math.cos( angle ) * 0.6, 0 ) );\n\n\t}\n\n\tvar sides = 6;\n\tvar tube2 = [];\n\n\tfor ( var i = 0; i < sides; i ++ ) {\n\n\t\tvar angle = ( i / sides ) * PI2;\n\t\ttube2.push( new THREE.Vector3( Math.sin( angle ) * 0.25, Math.cos( angle ) * 0.25, 0 ) );\n\n\t}\n\n\tvar vector = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\n\tvar drawShape = function ( shape, color ) {\n\n\t\tnormal.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\n\t\tfor ( var j = 0; j < shape.length; j ++ ) {\n\n\t\t\tvector.copy( shape[ j ] );\n\t\t\tvector.applyQuaternion( quaternion );\n\t\t\tvector.add( point );\n\n\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t}\n\n\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\tfor ( var j = shape.length - 1; j >= 0; j -- ) {\n\n\t\t\tvector.copy( shape[ j ] );\n\t\t\tvector.applyQuaternion( quaternion );\n\t\t\tvector.add( point );\n\n\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t}\n\n\t};\n\n\tvar vector1 = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\tvar vector3 = new THREE.Vector3();\n\tvar vector4 = new THREE.Vector3();\n\n\tvar normal1 = new THREE.Vector3();\n\tvar normal2 = new THREE.Vector3();\n\tvar normal3 = new THREE.Vector3();\n\tvar normal4 = new THREE.Vector3();\n\n\tvar extrudeShape = function ( shape, offset, color ) {\n\n\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\tvar point1 = shape[ j ];\n\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\tvector1.copy( point1 ).add( offset );\n\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\tvector1.add( point );\n\n\t\t\tvector2.copy( point2 ).add( offset );\n\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\tvector2.add( point );\n\n\t\t\tvector3.copy( point2 ).add( offset );\n\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\tvector3.add( prevPoint );\n\n\t\t\tvector4.copy( point1 ).add( offset );\n\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\tvector4.add( prevPoint );\n\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t//\n\n\t\t\tnormal1.copy( point1 );\n\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\tnormal1.normalize();\n\n\t\t\tnormal2.copy( point2 );\n\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\tnormal2.normalize();\n\n\t\t\tnormal3.copy( point2 );\n\t\t\tnormal3.applyQuaternion( prevQuaternion );\n\t\t\tnormal3.normalize();\n\n\t\t\tnormal4.copy( point1 );\n\t\t\tnormal4.applyQuaternion( prevQuaternion );\n\t\t\tnormal4.normalize();\n\n\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t}\n\n\t};\n\n\tvar offset = new THREE.Vector3();\n\n\tfor ( var i = 1; i <= size; i ++ ) {\n\n\t\tpoint.copy( curve.getPointAt( i / size ) );\n\n\t\tup.set( 0, 1, 0 );\n\n\t\tforward.subVectors( point, prevPoint ).normalize();\n\t\tright.crossVectors( up, forward ).normalize();\n\t\tup.crossVectors( forward, right );\n\n\t\tvar angle = Math.atan2( forward.x, forward.z );\n\n\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\tif ( i % 2 === 0 ) {\n\n\t\t\tdrawShape( step, color2 );\n\n\t\t}\n\n\t\textrudeShape( tube1, offset.set( 0, -1.25, 0 ), color2 );\n\t\textrudeShape( tube2, offset.set( 2, 0, 0 ), color1 );\n\t\textrudeShape( tube2, offset.set( -2, 0, 0 ), color1 );\n\n\t\tprevPoint.copy( point );\n\t\tprevQuaternion.copy( quaternion );\n\n\t}\n\n\t// console.log( vertices.length );\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );\n\tthis.addAttribute( 'color', new THREE.BufferAttribute( new Float32Array( colors ), 3 ) );\n\n};\n\nRollerCoasterGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\nvar RollerCoasterLiftersGeometry = function ( curve, size ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar vertices = [];\n\tvar normals = [];\n\n\tvar quaternion = new THREE.Quaternion();\n\n\tvar up = new THREE.Vector3( 0, 1, 0 );\n\n\tvar point = new THREE.Vector3();\n\tvar tangent = new THREE.Vector3();\n\n\t// shapes\n\n\tvar tube1 = [\n\t\tnew THREE.Vector3(  0,  0.5, -0.5 ),\n\t\tnew THREE.Vector3(  0,  0.5,  0.5 ),\n\t\tnew THREE.Vector3(  0, -0.5,  0 )\n\t];\n\n\tvar tube2 = [\n\t\tnew THREE.Vector3( -0.5, 0,  0.5 ),\n\t\tnew THREE.Vector3( -0.5, 0, -0.5 ),\n\t\tnew THREE.Vector3(  0.5, 0,  0 )\n\t];\n\n\tvar tube3 = [\n\t\tnew THREE.Vector3(  0.5, 0, -0.5 ),\n\t\tnew THREE.Vector3(  0.5, 0,  0.5 ),\n\t\tnew THREE.Vector3( -0.5, 0,  0 )\n\t];\n\n\tvar vector1 = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\tvar vector3 = new THREE.Vector3();\n\tvar vector4 = new THREE.Vector3();\n\n\tvar normal1 = new THREE.Vector3();\n\tvar normal2 = new THREE.Vector3();\n\tvar normal3 = new THREE.Vector3();\n\tvar normal4 = new THREE.Vector3();\n\n\tvar extrudeShape = function ( shape, fromPoint, toPoint ) {\n\n\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\tvar point1 = shape[ j ];\n\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\tvector1.copy( point1 )\n\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\tvector1.add( fromPoint );\n\n\t\t\tvector2.copy( point2 )\n\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\tvector2.add( fromPoint );\n\n\t\t\tvector3.copy( point2 )\n\t\t\tvector3.applyQuaternion( quaternion );\n\t\t\tvector3.add( toPoint );\n\n\t\t\tvector4.copy( point1 )\n\t\t\tvector4.applyQuaternion( quaternion );\n\t\t\tvector4.add( toPoint );\n\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t//\n\n\t\t\tnormal1.copy( point1 );\n\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\tnormal1.normalize();\n\n\t\t\tnormal2.copy( point2 );\n\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\tnormal2.normalize();\n\n\t\t\tnormal3.copy( point2 );\n\t\t\tnormal3.applyQuaternion( quaternion );\n\t\t\tnormal3.normalize();\n\n\t\t\tnormal4.copy( point1 );\n\t\t\tnormal4.applyQuaternion( quaternion );\n\t\t\tnormal4.normalize();\n\n\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t}\n\n\t};\n\n\tvar fromPoint = new THREE.Vector3();\n\tvar toPoint = new THREE.Vector3();\n\n\tfor ( var i = 1; i <= size; i ++ ) {\n\n\t\tpoint.copy( curve.getPointAt( i / size ) );\n\t\ttangent.copy( curve.getTangentAt( i / size ) );\n\n\t\tvar angle = Math.atan2( tangent.x, tangent.z );\n\n\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t//\n\n\t\tif ( point.y > 100 ) {\n\n\t\t\tfromPoint.set( -7.5, -3.5, 0 );\n\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\tfromPoint.add( point );\n\n\t\t\ttoPoint.set( 7.5, -3.5, 0 );\n\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\ttoPoint.add( point );\n\n\t\t\textrudeShape( tube1, fromPoint, toPoint );\n\n\t\t\tfromPoint.set( -7, -3, 0 );\n\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\tfromPoint.add( point );\n\n\t\t\ttoPoint.set( -7, -point.y, 0 );\n\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\ttoPoint.add( point );\n\n\t\t\textrudeShape( tube2, fromPoint, toPoint );\n\n\t\t\tfromPoint.set( 7, -3, 0 );\n\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\tfromPoint.add( point );\n\n\t\t\ttoPoint.set( 7, -point.y, 0 );\n\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\ttoPoint.add( point );\n\n\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t} else {\n\n\t\t\tfromPoint.set( 0, -2, 0 );\n\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\tfromPoint.add( point );\n\n\t\t\ttoPoint.set( 0, -point.y, 0 );\n\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\ttoPoint.add( point );\n\n\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );\n\n};\n\nRollerCoasterLiftersGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\nvar RollerCoasterShadowGeometry = function ( curve, size ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar vertices = [];\n\n\tvar up = new THREE.Vector3( 0, 1, 0 );\n\tvar forward = new THREE.Vector3();\n\n\tvar quaternion = new THREE.Quaternion();\n\tvar prevQuaternion = new THREE.Quaternion();\n\tprevQuaternion.setFromAxisAngle( up , Math.PI / 2 );\n\n\tvar point = new THREE.Vector3();\n\n\tvar prevPoint = new THREE.Vector3();\n\tprevPoint.copy( curve.getPointAt( 0 ) );\n\tprevPoint.y = 0;\n\n\tvar vector1 = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\tvar vector3 = new THREE.Vector3();\n\tvar vector4 = new THREE.Vector3();\n\n\tfor ( var i = 1; i <= size; i ++ ) {\n\n\t\tpoint.copy( curve.getPointAt( i / size ) );\n\t\tpoint.y = 0;\n\n\t\tforward.subVectors( point, prevPoint );\n\n\t\tvar angle = Math.atan2( forward.x, forward.z );\n\n\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\tvector1.set( -3, 0, 0 );\n\t\tvector1.applyQuaternion( quaternion );\n\t\tvector1.add( point );\n\n\t\tvector2.set(  3, 0, 0 );\n\t\tvector2.applyQuaternion( quaternion );\n\t\tvector2.add( point );\n\n\t\tvector3.set(  3, 0, 0 );\n\t\tvector3.applyQuaternion( prevQuaternion );\n\t\tvector3.add( prevPoint );\n\n\t\tvector4.set( -3, 0, 0 );\n\t\tvector4.applyQuaternion( prevQuaternion );\n\t\tvector4.add( prevPoint );\n\n\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\tprevPoint.copy( point );\n\t\tprevQuaternion.copy( quaternion );\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n};\n\nRollerCoasterShadowGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\nvar SkyGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar vertices = [];\n\n\tfor ( var i = 0; i < 100; i ++ ) {\n\n\t\tvar x = Math.random() * 8000 - 4000;\n\t\tvar y = Math.random() * 500 + 500;\n\t\tvar z = Math.random() * 8000 - 4000;\n\n\t\tvar size = Math.random() * 400 + 200;\n\n\t\tvertices.push( x - size, y, z - size );\n\t\tvertices.push( x + size, y, z - size );\n\t\tvertices.push( x - size, y, z + size );\n\n\t\tvertices.push( x + size, y, z - size );\n\t\tvertices.push( x + size, y, z + size );\n\t\tvertices.push( x - size, y, z + size );\n\n\t}\n\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n};\n\nSkyGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\nvar TreesGeometry = function ( landscape ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar raycaster = new THREE.Raycaster();\n\traycaster.ray.direction.set( 0, -1, 0 );\n\n\tfor ( var i = 0; i < 2000; i ++ ) {\n\n\t\tvar x = Math.random() * 5000 - 2500;\n\t\tvar z = Math.random() * 5000 - 2500;\n\n\t\traycaster.ray.origin.set( x, 500, z );\n\n\t\tvar intersections = raycaster.intersectObject( landscape );\n\n\t\tif ( intersections.length === 0 ) continue;\n\n\t\tvar y = intersections[ 0 ].point.y;\n\n\t\tvar height = Math.random() * 50 + 5;\n\n\t\tvar angle = Math.random() * Math.PI * 2;\n\n\t\tvertices.push( x + Math.sin( angle ) * 10, y, z + Math.cos( angle ) * 10 );\n\t\tvertices.push( x, y + height, z );\n\t\tvertices.push( x + Math.sin( angle + Math.PI ) * 10, y, z + Math.cos( angle + Math.PI ) * 10 );\n\n\t\tangle += Math.PI / 2;\n\n\t\tvertices.push( x + Math.sin( angle ) * 10, y, z + Math.cos( angle ) * 10 );\n\t\tvertices.push( x, y + height, z );\n\t\tvertices.push( x + Math.sin( angle + Math.PI ) * 10, y, z + Math.cos( angle + Math.PI ) * 10 );\n\n\t\tvar random = Math.random() * 0.1;\n\n\t\tfor ( var j = 0; j < 6; j ++ ) {\n\n\t\t\tcolors.push( 0.2 + random, 0.4 + random, 0 );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\tthis.addAttribute( 'color', new THREE.BufferAttribute( new Float32Array( colors ), 3 ) );\n\n};\n\nTreesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n"]}